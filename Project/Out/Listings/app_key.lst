C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 12:36:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) TABS(
                    -2) OBJECT(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          static uint8_t press_long_lock = 0;
  11          
  12          //static idata uint8_t buf[PAYLOAD_WIDTH] = {0};
  13          #if 0
              void app_key_init(void) {
              
              }
              
              void app_power_on(void) {
                SW_Reset();  //复位
              }
              void app_power_off(void) {
              //  lcd_bright_off();
                LCD_Clear_All();
              }
              #endif
  26          
  27          void app_key_pro(uint8_t keyCode) {
  28   1      
  29   1        uint8_t index = 0;
  30   1        uint8_t i = 0;
  31   1      
  32   1        if (g_tWork.match_code_mode) {
  33   2          return;
  34   2        }
  35   1      
  36   1        index = 0;
  37   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  38   1        switch (keyCode) {
  39   2        case KEY_UP_K1:   // power short
  40   2          if (press_long_lock == 0) {
  41   3            sendBuf[index++] = LCD2LAMP_HEADER;
  42   3            sendBuf[index++] = 0x01;
  43   3            sendBuf[index++] = KEY_CARD_POWER_CMD;
  44   3            for (i = 0; i < (sendBuf[1] + 1); i++) {
  45   4              sendBuf[index] += sendBuf[i + 1];
  46   4            }
  47   3          }
  48   2          press_long_lock = 0;
  49   2          break;
  50   2        case KEY_DOWN_K1:
  51   2      
  52   2          break;
  53   2        case KEY_LONG_K1:   //power long
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 12:36:14 PAGE 2   

  54   2          press_long_lock = 1;
  55   2          sendBuf[index++] = LCD2LAMP_HEADER;
  56   2          sendBuf[index++] = 0x01;
  57   2          sendBuf[index++] = KEY_POWER_SHORT_CMD;
  58   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
  59   3            sendBuf[index] += sendBuf[i + 1];
  60   3          }
  61   2          break;
  62   2        case KEY_UP_K2:   //play/pause
  63   2      
  64   2          break;
  65   2        case KEY_DOWN_K2:
  66   2          sendBuf[index++] = LCD2LAMP_HEADER;
  67   2          sendBuf[index++] = 0x01;
  68   2          sendBuf[index++] = KEY_PLAY_SHORT_CMD;
  69   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
  70   3            sendBuf[index] += sendBuf[i + 1];
  71   3          }
  72   2          break;
  73   2        case KEY_LONG_K2:
  74   2          sendBuf[index++] = LCD2LAMP_HEADER;
  75   2          sendBuf[index++] = 0x01;
  76   2          sendBuf[index++] = KEY_PLAY_LONG_CMD;
  77   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
  78   3            sendBuf[index] += sendBuf[i + 1];
  79   3          }
  80   2          break;
  81   2        case KEY_UP_K3:   // down
  82   2      
  83   2          break;
  84   2        case KEY_DOWN_K3:
  85   2          sendBuf[index++] = LCD2LAMP_HEADER;
  86   2          sendBuf[index++] = 0x01;
  87   2          sendBuf[index++] = KEY_DOWN_CMD;
  88   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
  89   3            sendBuf[index] += sendBuf[i + 1];
  90   3          }
  91   2          break;
  92   2        case KEY_LONG_K3:
  93   2          sendBuf[index++] = LCD2LAMP_HEADER;
  94   2          sendBuf[index++] = 0x01;
  95   2          sendBuf[index++] = KEY_DOWN_CMD;
  96   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
  97   3            sendBuf[index] += sendBuf[i + 1];
  98   3          }
  99   2          break;
 100   2        case KEY_UP_K4:   // up
 101   2      
 102   2          break;
 103   2        case KEY_DOWN_K4:  // 连发
 104   2          sendBuf[index++] = LCD2LAMP_HEADER;
 105   2          sendBuf[index++] = 0x01;
 106   2          sendBuf[index++] = KEY_UP_CMD;
 107   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 108   3            sendBuf[index] += sendBuf[i + 1];
 109   3          }
 110   2          break;
 111   2        case KEY_LONG_K4:
 112   2          sendBuf[index++] = LCD2LAMP_HEADER;
 113   2          sendBuf[index++] = 0x01;
 114   2          sendBuf[index++] = KEY_UP_CMD;
 115   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 12:36:14 PAGE 3   

 116   3            sendBuf[index] += sendBuf[i + 1];
 117   3          }
 118   2          break;
 119   2        case KEY_UP_K5:   //vol+
 120   2      
 121   2          break;
 122   2        case KEY_DOWN_K5:
 123   2          sendBuf[index++] = LCD2LAMP_HEADER;
 124   2          sendBuf[index++] = 0x01;
 125   2          sendBuf[index++] = KEY_VOL_ADD_CMD;
 126   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 127   3            sendBuf[index] += sendBuf[i + 1];
 128   3          }
 129   2          break;
 130   2        case KEY_LONG_K5:
 131   2          sendBuf[index++] = LCD2LAMP_HEADER;
 132   2          sendBuf[index++] = 0x01;
 133   2          sendBuf[index++] = KEY_VOL_ADD_CMD;
 134   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 135   3            sendBuf[index] += sendBuf[i + 1];
 136   3          }
 137   2          break;
 138   2        case KEY_UP_K6:   //ACC  继电器
 139   2      
 140   2          break;
 141   2        case KEY_DOWN_K6:
 142   2          sendBuf[index++] = LCD2LAMP_HEADER;
 143   2          sendBuf[index++] = 0x02;
 144   2          sendBuf[index++] = KEY_ACC_CMD;
 145   2          sendBuf[index++] = 0x03;
 146   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 147   3            sendBuf[index] += sendBuf[i + 1];
 148   3          }
 149   2          break;
 150   2        case KEY_LONG_K6:
 151   2      
 152   2          break;
 153   2        case KEY_UP_K7:   // vol-
 154   2      
 155   2          break;
 156   2        case KEY_DOWN_K7:
 157   2          sendBuf[index++] = LCD2LAMP_HEADER;
 158   2          sendBuf[index++] = 0x01;
 159   2          sendBuf[index++] = KEY_VOL_MINUS_CMD;
 160   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 161   3            sendBuf[index] += sendBuf[i + 1];
 162   3          }
 163   2          break;
 164   2        case KEY_LONG_K7:
 165   2          sendBuf[index++] = LCD2LAMP_HEADER;
 166   2          sendBuf[index++] = 0x01;
 167   2          sendBuf[index++] = KEY_VOL_MINUS_CMD;
 168   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 169   3            sendBuf[index] += sendBuf[i + 1];
 170   3          }
 171   2          break;
 172   2        case KEY_UP_K8:   // mode
 173   2          sendBuf[index++] = LCD2LAMP_HEADER;
 174   2          sendBuf[index++] = 0x01;
 175   2          sendBuf[index++] = KEY_MODE_CMD;
 176   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 177   3            sendBuf[index] += sendBuf[i + 1];
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 12:36:14 PAGE 4   

 178   3          }
 179   2          break;
 180   2        case KEY_DOWN_K8:
 181   2      
 182   2          break;
 183   2        case KEY_LONG_K8:
 184   2      
 185   2          break;
 186   2        case KEY_UP_K9:   // dome
 187   2          sendBuf[index++] = LCD2LAMP_HEADER;
 188   2          sendBuf[index++] = 0x01;
 189   2          sendBuf[index++] = KEY_DOME_CMD;
 190   2          for (i = 0; i < (sendBuf[1] + 1); i++) {
 191   3            sendBuf[index] += sendBuf[i + 1];
 192   3          }
 193   2          break;
 194   2        case KEY_DOWN_K9:
 195   2          break;
 196   2        case KEY_LONG_K9:
 197   2          break;
 198   2        case KEY_UP_K2_6:    //
 199   2          break;
 200   2        case KEY_DOWN_K2_6:
 201   2          break;
 202   2        case KEY_LONG_K2_6:
 203   2          g_tWork.match_code_mode = 1;
 204   2          app_2d4_switch_public_address();
 205   2      
 206   2          LCD_ShowString(" CONNECT");
 207   2          app_lcd_default_string_set(" CONNECT", 8, 0);
 208   2      
 209   2          break;
 210   2        default:
 211   2      
 212   2          break;
 213   2        }
 214   1        if (index) {
 215   2          index++;
 216   2          app_2d4_send(sendBuf, index);
 217   2        }
 218   1      
 219   1      }
 220          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1516    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =      1       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
