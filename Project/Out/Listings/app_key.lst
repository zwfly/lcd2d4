C51 COMPILER V9.56.0.0   APP_KEY                                                           08/10/2017 22:48:22 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) OBJEC
                    -T(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          DEVICE_T g_tDevice;
  11          
  12          static E_TRAINING_MODE mode;
  13          static char letter = '\0';
  14          
  15          #define BLINK_FLASH_TIME   4
  16          
  17          /*
  18           * level: 0, 拉动时候的界面
  19           *        1,
  20           * */
  21          uint8_t level = 0;
  22          
  23          static void app_UI_init(void);
  24          
  25          void app_key_init(void) {
  26   1              level = 0;
  27   1      
  28   1              clr_PIPS2;
  29   1              clr_PIPS1;
  30   1              clr_PIPS0;
  31   1      
  32   1              set_PIT3;
  33   1              set_PINEN3;
  34   1              clr_PIPEN3;
  35   1      
  36   1              mode = E_Simple_metering_mode;
  37   1              g_tWork.mode = E_Simple_metering_mode;
  38   1              g_tDevice.status = E_PowerOn;
  39   1              app_UI_init();
  40   1      }
  41          
  42          static void app_UI_init(void) {
  43   1              
  44   1      }
  45          
  46          void app_flash_Show(void) {
  47   1      
  48   1      }
  49          void app_flash_Clear(void) {
  50   1      
  51   1      
  52   1      }
  53          void app_key_power_or_return(void) {
C51 COMPILER V9.56.0.0   APP_KEY                                                           08/10/2017 22:48:22 PAGE 2   

  54   1      
  55   1      
  56   1      }
  57          void app_key_set(void) {
  58   1              
  59   1      }
  60          
  61          void app_key_add(void) {
  62   1      
  63   1      }
  64          void app_key_ok(void) {
  65   1              
  66   1      }
  67          
  68          void app_power_on(void) {
  69   1              SW_Reset();  //复位
  70   1      }
  71          void app_power_off(void) {
  72   1              lcd_bright_off();
  73   1              LCD_Clear_All();
  74   1      }
  75          
  76          static uint8_t noOps_timeoutCnt = 0;
  77          static BIT offBight_flag = 0;
  78          //static BIT keyInvalid_flag = 0;
  79          void app_key_100ms_pro(void) {
  80   1              static uint8_t cnt = 0;
  81   1      
  82   1              if (g_tDevice.status == E_PowerDown) {
  83   2                      cnt++;
  84   2                      if (cnt >= 3) {
  85   3                              cnt = 0;
  86   3      
  87   3                              app_key_clear_noOps_timeoutCnt();
  88   3      //                      keyInvalid_flag = 1;
  89   3                              set_PD;
  90   3                      }
  91   2              } else {
  92   2                      cnt = 0;
  93   2              }
  94   1      }
  95          
  96          void app_key_1s_pro(void) {
  97   1      
  98   1              noOps_timeoutCnt++;
  99   1              if (noOps_timeoutCnt == 10) {
 100   2                      offBight_flag = 1;
 101   2      //              keyInvalid_flag = 1;
 102   2                      lcd_bright_off();
 103   2                      printf("off bright\n");
 104   2              } else if (noOps_timeoutCnt == 20) {
 105   2                      app_power_off();
 106   2                      printf("power off\n");
 107   2                      g_tDevice.status = E_PowerDown;
 108   2              }
 109   1      
 110   1      }
 111          void app_key_clear_noOps_timeoutCnt(void) {
 112   1              noOps_timeoutCnt = 0;
 113   1      }
 114          void app_key_pro(uint8_t keyCode) {
 115   1      
C51 COMPILER V9.56.0.0   APP_KEY                                                           08/10/2017 22:48:22 PAGE 3   

 116   1              app_key_clear_noOps_timeoutCnt();
 117   1      
 118   1              if (offBight_flag && (g_tDevice.status == E_PowerOn)) {
 119   2                      offBight_flag = 0;
 120   2                      lcd_bright_on();
 121   2                      //      keyInvalid_flag = 1;
 122   2                      return;
 123   2              }
 124   1      
 125   1              switch (keyCode) {
 126   2              case KEY_UP_K1:
 127   2      
 128   2                      if (g_tDevice.status == E_PowerReady) {
 129   3                              app_power_off();
 130   3                              printf("power off\n");
 131   3                              g_tDevice.status = E_PowerDown;
 132   3                      }
 133   2      
 134   2                      break;
 135   2              case KEY_DOWN_K1:
 136   2      
 137   2                      if (g_tDevice.status == E_PowerOn) {
 138   3                              app_key_power_or_return();
 139   3                      }
 140   2      
 141   2                      break;
 142   2              case KEY_LONG_K1:
 143   2      
 144   2                      if (g_tDevice.status == E_PowerOn) {
 145   3                              g_tDevice.status = E_PowerDown;
 146   3                              app_power_off();
 147   3                      } else if (g_tDevice.status == E_PowerDown) {
 148   3                              g_tDevice.status = E_PowerOn;
 149   3                              app_power_on();
 150   3                      } else if (g_tDevice.status == E_PowerReady) {
 151   3                              g_tDevice.status = E_PowerOn;
 152   3                              app_power_on();
 153   3                      }
 154   2      
 155   2                      break;
 156   2              case KEY_UP_K2:
 157   2      
 158   2                      break;
 159   2              case KEY_DOWN_K2:
 160   2      
 161   2                      app_key_set();
 162   2                      break;
 163   2              case KEY_LONG_K2:
 164   2      
 165   2                      break;
 166   2              case KEY_UP_K3:
 167   2      
 168   2                      break;
 169   2              case KEY_DOWN_K3:
 170   2      
 171   2                      app_key_add();
 172   2                      break;
 173   2              case KEY_LONG_K3:
 174   2      
 175   2                      break;
 176   2              case KEY_UP_K4:
 177   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           08/10/2017 22:48:22 PAGE 4   

 178   2                      break;
 179   2              case KEY_DOWN_K4:
 180   2      
 181   2                      app_key_ok();
 182   2                      break;
 183   2              case KEY_LONG_K4:
 184   2      
 185   2                      break;
 186   2      
 187   2              case KEY_UP_K5:
 188   2      
 189   2                      break;
 190   2              case KEY_DOWN_K5:
 191   2      
 192   2                      query_work_sum();
 193   2                      break;
 194   2              case KEY_LONG_K5:
 195   2      
 196   2                      break;
 197   2      
 198   2              default:
 199   2      //              BEEP_KeyTone();
 200   2                      break;
 201   2      
 202   2              }
 203   1      }
 204          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    320    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
