C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) OBJEC
                    -T(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *      模块名称 : 独立按键驱动模块
   5           *      文件名称 : bsp_key.c
   6           *      版    本 : V1.0
   7           *      说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *                              (1) 按键按下
   9           *                              (2) 按键弹起
  10           *                              (3) 长按键
  11           *                              (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          
  18          #define KEY_AD_ERROR 5
  19          
  20          #define S2_AD  980
  21          #define S3_AD  955
  22          #define S4_AD  884
  23          #define S5_AD  0
  24          #define S6_AD  991
  25          #define S7_AD  977
  26          #define S8_AD  952
  27          #define S9_AD  881
  28          
  29          static idata KEY_T s_tBtn[KEY_COUNT];
  30          static idata KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  31          
  32          static void bsp_InitKeyVar(void);
  33          static void bsp_InitKeyHard(void);
  34          static void bsp_DetectKey(uint8_t i);
  35          
  36          /*
  37           *********************************************************************************************************
  38           *      函 数 名: IsKeyDownX
  39           *      功能说明: 判断按键是否按下
  40           *      形    参: 无
  41           *      返 回 值: 返回值1 表示按下，0表示未按下
  42           *********************************************************************************************************
  43           */
  44          
  45          //S1
  46          static uint8_t IsKeyDown1(void) {
  47   1              if (P02) {
  48   2                      return 0;
  49   2              } else {
  50   2                      return 1;
  51   2              }
  52   1      }
  53          uint16_t max = 0;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 2   

  54          uint16_t min = 0;
  55          static uint8_t IsKeyDown(uint16_t key_ad, uint16_t result_ad) {
  56   1      
  57   1              max = (key_ad + KEY_AD_ERROR) > 1023 ? 1023 : key_ad + KEY_AD_ERROR;
  58   1              min = (key_ad < KEY_AD_ERROR) ? 0 : (key_ad - KEY_AD_ERROR);
  59   1      
  60   1              return ((result_ad >= min) && (result_ad <= max));
  61   1      }
  62          
  63          //CH1, S2 ad = 980
  64          static uint8_t IsKeyDown2(void) {
  65   1      
  66   1              return IsKeyDown(S2_AD, g_tADC_Result.result[0]);
  67   1      }
  68          //CH1, S3 ad = 954
  69          static uint8_t IsKeyDown3(void) {
  70   1              return IsKeyDown(S3_AD, g_tADC_Result.result[0]);
  71   1      }
  72          //CH1, S4 ad = 884
  73          static uint8_t IsKeyDown4(void) {
  74   1              return IsKeyDown(S4_AD, g_tADC_Result.result[0]);
  75   1      }
  76          //CH1, S5 ad = 0
  77          static uint8_t IsKeyDown5(void) {
  78   1      
  79   1              return IsKeyDown(S5_AD, g_tADC_Result.result[0]);
  80   1      }
  81          //CH2, S6 ad = 1020
  82          static uint8_t IsKeyDown6(void) {
  83   1              return IsKeyDown(S6_AD, g_tADC_Result.result[1]);
  84   1      }
  85          //CH2, S7 ad = 1018
  86          static uint8_t IsKeyDown7(void) {
  87   1              return IsKeyDown(S7_AD, g_tADC_Result.result[1]);
  88   1      }
  89          //CH2, S8 ad = 1016
  90          static uint8_t IsKeyDown8(void) {
  91   1              return IsKeyDown(S8_AD, g_tADC_Result.result[1]);
  92   1      }
  93          //CH2, S9 ad = 1009
  94          static uint8_t IsKeyDown9(void) {
  95   1              return IsKeyDown(S9_AD, g_tADC_Result.result[1]);
  96   1      }
  97          
  98          static uint8_t IsKeyDown_1AND6(void) {
  99   1              if (IsKeyDown1() && IsKeyDown6()) {
 100   2                      return 1;
 101   2              } else {
 102   2                      return 0;
 103   2              }
 104   1      
 105   1      }
 106          /*
 107           *********************************************************************************************************
 108           *      函 数 名: bsp_InitKey
 109           *      功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
 110           *      形    参:  无
 111           *      返 回 值: 无
 112           *********************************************************************************************************
 113           */
 114          void bsp_InitKey(void) {
 115   1              bsp_InitKeyVar(); /* 初始化按键变量 */
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 3   

 116   1              bsp_InitKeyHard(); /* 初始化按键硬件 */
 117   1      }
 118          
 119          /*
 120           *********************************************************************************************************
 121           *      函 数 名: bsp_PutKey
 122           *      功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
 123           *      形    参:  _KeyCode : 按键代码
 124           *      返 回 值: 无
 125           *********************************************************************************************************
 126           */
 127          void bsp_PutKey(uint8_t _KeyCode) {
 128   1              s_tKey.Buf[s_tKey.Write] = _KeyCode;
 129   1      
 130   1              if (++s_tKey.Write >= KEY_FIFO_SIZE) {
 131   2                      s_tKey.Write = 0;
 132   2              }
 133   1      }
 134          
 135          /*
 136           *********************************************************************************************************
 137           *      函 数 名: bsp_GetKey
 138           *      功能说明: 从按键FIFO缓冲区读取一个键值。
 139           *      形    参:  无
 140           *      返 回 值: 按键代码
 141           *********************************************************************************************************
 142           */
 143          uint8_t bsp_GetKey(void) {
 144   1              uint8_t ret;
 145   1      
 146   1              if (s_tKey.Read == s_tKey.Write) {
 147   2                      return KEY_NONE;
 148   2              } else {
 149   2                      ret = s_tKey.Buf[s_tKey.Read];
 150   2      
 151   2                      if (++s_tKey.Read >= KEY_FIFO_SIZE) {
 152   3                              s_tKey.Read = 0;
 153   3                      }
 154   2                      return ret;
 155   2              }
 156   1      }
 157          
 158          /*
 159           *********************************************************************************************************
 160           *      函 数 名: bsp_GetKey2
 161           *      功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
 162           *      形    参:  无
 163           *      返 回 值: 按键代码
 164           *********************************************************************************************************
 165           */
 166          uint8_t bsp_GetKey2(void) {
 167   1              uint8_t ret;
 168   1      
 169   1              if (s_tKey.Read2 == s_tKey.Write) {
 170   2                      return KEY_NONE;
 171   2              } else {
 172   2                      ret = s_tKey.Buf[s_tKey.Read2];
 173   2      
 174   2                      if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 175   3                              s_tKey.Read2 = 0;
 176   3                      }
 177   2                      return ret;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 4   

 178   2              }
 179   1      }
 180          
 181          /*
 182           *********************************************************************************************************
 183           *      函 数 名: bsp_GetKeyState
 184           *      功能说明: 读取按键的状态
 185           *      形    参:  _ucKeyID : 按键ID，从0开始
 186           *      返 回 值: 1 表示按下， 0 表示未按下
 187           *********************************************************************************************************
 188           */
 189          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 190   1              return s_tBtn[_ucKeyID].State;
 191   1      }
 192          
 193          /*
 194           *********************************************************************************************************
 195           *      函 数 名: bsp_SetKeyParam
 196           *      功能说明: 设置按键参数
 197           *      形    参：_ucKeyID : 按键ID，从0开始
 198           *                      _LongTime : 长按事件时间
 199           *                       _RepeatSpeed : 连发速度
 200           *      返 回 值: 无
 201           *********************************************************************************************************
 202           */
 203          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 204   1              s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 205   1              s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 206   1              s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 207   1      }
 208          
 209          /*
 210           *********************************************************************************************************
 211           *      函 数 名: bsp_ClearKey
 212           *      功能说明: 清空按键FIFO缓冲区
 213           *      形    参：无
 214           *      返 回 值: 按键代码
 215           *********************************************************************************************************
 216           */
 217          void bsp_ClearKey(void) {
 218   1              s_tKey.Read = s_tKey.Write;
 219   1      }
 220          
 221          /*
 222           *********************************************************************************************************
 223           *      函 数 名: bsp_InitKeyHard
 224           *      功能说明: 配置按键对应的GPIO
 225           *      形    参:  无
 226           *      返 回 值: 无
 227           *********************************************************************************************************
 228           */
 229          static void bsp_InitKeyHard(void) {
 230   1      
 231   1              set_P0M1_2;
 232   1              clr_P0M2_2;
 233   1      
 234   1      }
 235          
 236          /*
 237           *********************************************************************************************************
 238           *      函 数 名: bsp_InitKeyVar
 239           *      功能说明: 初始化按键变量
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 5   

 240           *      形    参:  无
 241           *      返 回 值: 无
 242           *********************************************************************************************************
 243           */
 244          static void bsp_InitKeyVar(void) {
 245   1              uint8_t i;
 246   1      
 247   1      
 248   1              /* 对按键FIFO读写指针清零 */
 249   1              s_tKey.Read = 0;
 250   1              s_tKey.Write = 0;
 251   1              s_tKey.Read2 = 0;
 252   1      
 253   1              /* 给每个按键结构体成员变量赋一组缺省值 */
 254   1              for (i = 0; i < KEY_COUNT; i++) {
 255   2                      s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 256   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 257   2                      s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 258   2                      //s_tBtn[i].KeyCodeDown = 3 * i + 1;                            /* 按键按下的键值代码 */
 259   2                      //s_tBtn[i].KeyCodeUp   = 3 * i + 2;                            /* 按键弹起的键值代码 */
 260   2                      //s_tBtn[i].KeyCodeLong = 3 * i + 3;                            /* 按键被持续按下的键值代码 */
 261   2                      s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 262   2                      s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 263   2              }
 264   1      
 265   1              /* 判断按键按下的函数 */
 266   1              s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 267   1              s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 268   1              s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 269   1              s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 270   1              s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 271   1              s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 272   1              s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 273   1              s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 274   1              s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 275   1              s_tBtn[9].IsKeyDownFunc = IsKeyDown_1AND6;
 276   1      }
 277          
 278          /*
 279           *********************************************************************************************************
 280           *      函 数 名: bsp_DetectKey
 281           *      功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 282           *      形    参:  按键结构变量指针
 283           *      返 回 值: 无
 284           *********************************************************************************************************
 285           */
 286          KEY_T *pBtn;
 287          static void bsp_DetectKey(uint8_t i) {
 288   1              pBtn = &s_tBtn[i];
 289   1              if (pBtn->IsKeyDownFunc()) {
 290   2                      if (pBtn->Count < KEY_FILTER_TIME) {
 291   3                              pBtn->Count = KEY_FILTER_TIME;
 292   3                      } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 293   3                              pBtn->Count++;
 294   3                      } else {
 295   3                              if (pBtn->State == 0) {
 296   4                                      pBtn->State = 1;
 297   4      
 298   4                                      /* 发送按钮按下的消息 */
 299   4                                      bsp_PutKey((uint8_t) (3 * i + 1));
 300   4                              }
 301   3      
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 6   

 302   3                              if (pBtn->LongTime > 0) {
 303   4                                      if (pBtn->LongCount < pBtn->LongTime) {
 304   5                                              /* 发送按钮持续按下的消息 */
 305   5                                              if (++pBtn->LongCount == pBtn->LongTime) {
 306   6                                                      /* 键值放入按键FIFO */
 307   6                                                      bsp_PutKey((uint8_t) (3 * i + 3));
 308   6                                              }
 309   5                                      } else {
 310   5                                              if (pBtn->RepeatSpeed > 0) {
 311   6                                                      if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 312   7                                                              pBtn->RepeatCount = 0;
 313   7                                                              /* 常按键后，每隔10ms发送1个按键 */
 314   7                                                              bsp_PutKey((uint8_t) (3 * i + 1));
 315   7                                                      }
 316   6                                              }
 317   5                                      }
 318   4                              }
 319   3                      }
 320   2              } else {
 321   2                      if (pBtn->Count > KEY_FILTER_TIME) {
 322   3                              pBtn->Count = KEY_FILTER_TIME;
 323   3                      } else if (pBtn->Count != 0) {
 324   3                              pBtn->Count--;
 325   3                      } else {
 326   3                              if (pBtn->State == 1) {
 327   4                                      pBtn->State = 0;
 328   4      
 329   4                                      /* 发送按钮弹起的消息 */
 330   4                                      bsp_PutKey((uint8_t) (3 * i + 2));
 331   4                              }
 332   3                      }
 333   2                      pBtn->LongCount = 0;
 334   2                      pBtn->RepeatCount = 0;
 335   2              }
 336   1      }
 337          
 338          /*
 339           *********************************************************************************************************
 340           *      函 数 名: bsp_KeyScan
 341           *      功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 342           *      形    参:  无
 343           *      返 回 值: 无
 344           *********************************************************************************************************
 345           */
 346          void bsp_KeyScan(void) {
 347   1              uint8_t i;
 348   1      
 349   1              for (i = 0; i < KEY_COUNT; i++) {
 350   2                      bsp_DetectKey(i);
 351   2              }
 352   1      }
 353          
 354          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    908    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    123    ----
C51 COMPILER V9.56.0.0   BSP_KEY                                                           09/03/2017 16:50:59 PAGE 7   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
