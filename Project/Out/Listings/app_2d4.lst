C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  11          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  12          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  13          
  14          static char tmpBuf[16] = { 0 };
  15          
  16          void app_2d4_init(void) {
  17   1      
  18   1              sendRcv_flag = 0;
  19   1              memset(rcvBuf, 0, PAYLOAD_WIDTH);
  20   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  21   1      
  22   1              RF_Init();
  23   1              RF_RxMode();
  24   1      
  25   1      //      RF_Carrier(1);
  26   1      }
  27          
  28          void app_2d4_send(uint8_t *d, uint8_t len) {
  29   1      
  30   1              if (len > PAYLOAD_WIDTH) {
  31   2                      return;
  32   2              }
  33   1      
  34   1              RF_TxMode();
  35   1              sendRcv_flag = 1;
  36   1      
  37   1              if (sendBuf != d) {
  38   2                      memcpy(sendBuf, d, len);
  39   2              }
  40   1      
  41   1      }
  42          static void speaker_status_resp(void) {
  43   1              if (g_tWork.status.bits.speaker) {
  44   2                      LCD_ShowString(" BAZOOKA");
  45   2              } else {
  46   2                      LCD_ShowString(" PWR OFF");
  47   2              }
  48   1      }
  49          static void relay_status_resp(void) {
  50   1              if (g_tWork.status.bits.relay) {
  51   2                      LCD_ShowString("RELAY ON");
  52   2              } else {
  53   2                      LCD_ShowString("RELAYOFF");
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 2   

  54   2              }
  55   1      
  56   1      }
  57          static void vol_resp(void) {
  58   1              char str[16] = { 0 };
  59   1      
  60   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  61   1              LCD_ShowString(str);
  62   1      }
  63          
  64          static void clear_lcd_resp(void) {
  65   1              LCD_ShowString("        ");
  66   1      
  67   1              LCD_Clear_upColon_ICO();
  68   1              LCD_Clear_downColon_ICO();
  69   1      }
  70          static void BT_pause_show_lcd_resp(void) {
  71   1              LCD_ShowString("   PAUSE");
  72   1      }
  73          
  74          static void BT_play_show_lcd_resp(void) {
  75   1              LCD_ShowString("    PLAY");
  76   1      }
  77          static void FM_scanning_show_lcd_resp(void) {
  78   1              LCD_ShowString("SCANNING");
  79   1              LCD_Clear_upColon_ICO();
  80   1              LCD_Clear_downColon_ICO();
  81   1              LCD_Clear_MHZ_ICO();
  82   1      }
  83          #if 0
              static void FM_ok_show_lcd_resp(void) {
                      LCD_ShowString("FM 1027 ");
                      LCD_Clear_upColon_ICO();
                      LCD_Show_downColon_ICO();
                      LCD_Show_MHZ_ICO();
              }
              #endif
  91          static void AUX_mute_show_lcd_resp(void) {
  92   1              LCD_ShowString("   MUTE ");
  93   1      }
  94          
  95          static void AUX_play_show_lcd_resp(void) {
  96   1              LCD_ShowString("    PLAY");
  97   1      
  98   1      }
  99          static void USB_pause_show_lcd_resp(void) {
 100   1              LCD_ShowString("   PAUSE");
 101   1              LCD_Clear_upColon_ICO();
 102   1              LCD_Clear_downColon_ICO();
 103   1      }
 104          #if 0
              static void USB_time_show_lcd_resp(void) {
                      LCD_ShowString("     349");
                      LCD_Show_upColon_ICO();
                      LCD_Show_downColon_ICO();
              }
              #endif
 111          static void BT_next_show_lcd_resp(void) {
 112   1              LCD_ShowString("   NEXT ");
 113   1              LCD_Clear_upColon_ICO();
 114   1              LCD_Clear_downColon_ICO();
 115   1      }
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 3   

 116          static void BT_prev_show_lcd_resp(void) {
 117   1              LCD_ShowString("   PREV ");
 118   1              LCD_Clear_upColon_ICO();
 119   1              LCD_Clear_downColon_ICO();
 120   1      }
 121          static void FM_station_show_lcd_resp(void) {
 122   1              sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 123   1              LCD_ShowString(tmpBuf);
 124   1              LCD_Clear_upColon_ICO();
 125   1              LCD_Show_downColon_ICO();
 126   1      }
 127          static void USB_track_show_lcd_resp(void) {
 128   1              sprintf(tmpBuf, "TR %u", g_tWork.track);
 129   1              LCD_ShowString(tmpBuf);
 130   1              LCD_Clear_upColon_ICO();
 131   1              LCD_Clear_downColon_ICO();
 132   1      }
 133          
 134          static void app_2d4_Rcv(uint8_t *buf) {
 135   1              uint8_t i = 0;
 136   1              uint8_t index = 0;
 137   1              uint8_t check = 0;
 138   1      
 139   1              if (buf[0] != LAMP2LCD_HEADER) {
 140   2                      return;
 141   2              }
 142   1              key_bright_toggle();
 143   1              if (buf[1] > PAYLOAD_WIDTH) {
 144   2                      return;
 145   2              }
 146   1              for (i = 0; i < (buf[1] + 1); i++) {
 147   2                      check += buf[i + 1];
 148   2              }
 149   1              if (check != buf[buf[1] + 2]) {
 150   2                      return;
 151   2              }
 152   1      
 153   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
 154   1              index = 0;
 155   1              switch (buf[2]) {
 156   2              case POWER_SHORT_CMD:
 157   2      
 158   2                      break;
 159   2              case POWER_LONG_CMD:
 160   2      
 161   2                      if (buf[3]) {
 162   3                              g_tWork.status.bits.speaker = 1;
 163   3                              Repeat_SetStart(speaker_status_resp);
 164   3                              Repeat_SetStop(0);
 165   3      
 166   3                              Repeat_Start(20, 1, 1);
 167   3                      } else {
 168   3                              g_tWork.status.bits.speaker = 0;
 169   3                              Repeat_SetStart(speaker_status_resp);
 170   3                              Repeat_SetStop(0);
 171   3      
 172   3                              Repeat_Start(20, 1, 0);
 173   3                      }
 174   2      
 175   2                      break;
 176   2              case ACC_CMD:
 177   2      
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 4   

 178   2                      if (buf[3] == 1) {
 179   3                              g_tWork.status.bits.relay = 1;
 180   3                      } else {
 181   3                              g_tWork.status.bits.relay = 0;
 182   3                      }
 183   2                      Repeat_SetStart(relay_status_resp);
 184   2                      Repeat_SetStop(0);
 185   2                      Repeat_Start(20, 1, 1);
 186   2      
 187   2                      break;
 188   2              case UP_CMD:
 189   2                      switch (buf[3]) {
 190   3                      case 0x01:  //BT
 191   3                              Repeat_SetStart(BT_prev_show_lcd_resp);
 192   3                              Repeat_SetStop(0);
 193   3                              Repeat_Start(20, 1, 1);
 194   3      
 195   3                              break;
 196   3                      case 0x02:  //FM
 197   3                              g_tWork.FM_station = buf[4];
 198   3                              Repeat_SetStart(FM_station_show_lcd_resp);
 199   3                              Repeat_SetStop(0);
 200   3                              Repeat_Start(20, 1, 1);
 201   3      
 202   3                              break;
 203   3                      case 0x03:  //LED
 204   3      
 205   3                              break;
 206   3                      case 0x04:  //USB
 207   3                              g_tWork.track = buf[4];
 208   3                              g_tWork.track |= (buf[5] << 8);
 209   3                              Repeat_SetStart(USB_track_show_lcd_resp);
 210   3                              Repeat_SetStop(0);
 211   3                              Repeat_Start(20, 1, 1);
 212   3                              break;
 213   3                      default:
 214   3                              break;
 215   3                      }
 216   2                      break;
 217   2              case DOWN_CMD:
 218   2      
 219   2                      switch (buf[3]) {
 220   3                      case 0x01:  //BT
 221   3                              Repeat_SetStart(BT_next_show_lcd_resp);
 222   3                              Repeat_SetStop(0);
 223   3                              Repeat_Start(20, 1, 1);
 224   3      
 225   3                              break;
 226   3                      case 0x02:  //FM
 227   3                              g_tWork.FM_station = buf[4];
 228   3                              Repeat_SetStart(FM_station_show_lcd_resp);
 229   3                              Repeat_SetStop(0);
 230   3                              Repeat_Start(20, 1, 1);
 231   3                              break;
 232   3                      case 0x03:  //LED
 233   3      
 234   3                              break;
 235   3                      case 0x04:  //USB
 236   3                              g_tWork.track = buf[4];
 237   3                              g_tWork.track |= (buf[5] << 8);
 238   3                              Repeat_SetStart(USB_track_show_lcd_resp);
 239   3                              Repeat_SetStop(0);
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 5   

 240   3                              Repeat_Start(20, 1, 1);
 241   3                              break;
 242   3                      default:
 243   3                              break;
 244   3                      }
 245   2      
 246   2                      break;
 247   2              case DOME_CMD:
 248   2                      break;
 249   2              case VOL_ADD_CMD:
 250   2                      g_tWork.vol = buf[3];
 251   2      
 252   2                      Repeat_SetStart(vol_resp);
 253   2                      Repeat_SetStop(0);
 254   2      
 255   2                      Repeat_Start(20, 1, 1);
 256   2                      break;
 257   2              case VOL_MINUS_CMD:
 258   2                      g_tWork.vol = buf[3];
 259   2      
 260   2                      Repeat_SetStart(vol_resp);
 261   2                      Repeat_SetStop(0);
 262   2      
 263   2                      Repeat_Start(20, 1, 1);
 264   2                      break;
 265   2              case PLAY_CMD:
 266   2                      switch (buf[3]) {
 267   3                      case 0x01:  //BT
 268   3                              if (1 == buf[4]) {
 269   4                                      Repeat_SetStart(BT_play_show_lcd_resp);
 270   4                                      Repeat_SetStop(0);
 271   4                                      Repeat_Start(20, 1, 1);
 272   4                              } else if (2 == buf[4]) {
 273   4                                      Repeat_SetStart(BT_pause_show_lcd_resp);
 274   4                                      Repeat_SetStop(clear_lcd_resp);
 275   4                                      Repeat_Start(10, 10, 0);
 276   4                              }
 277   3                              break;
 278   3                      case 0x02:  //FM
 279   3                              if (2 == buf[4]) {
 280   4                                      Repeat_SetStart(FM_scanning_show_lcd_resp);
 281   4                                      Repeat_SetStop(0);
 282   4                                      Repeat_Start(20, 1, 0);
 283   4                              } else if (1 == buf[4]) {
 284   4      //                              Repeat_SetStart(FM_ok_show_lcd_resp);
 285   4      //                              Repeat_SetStop(0);
 286   4      //                              Repeat_Start(10, 1, 1);
 287   4                              }
 288   3                              break;
 289   3                      case 0x03:  //AUX
 290   3                              if (1 == buf[4]) {
 291   4                                      Repeat_SetStart(AUX_play_show_lcd_resp);
 292   4                                      Repeat_SetStop(clear_lcd_resp);
 293   4                                      Repeat_Start(10, 10, 0);
 294   4                              } else if (2 == buf[4]) {
 295   4                                      Repeat_SetStart(AUX_mute_show_lcd_resp);
 296   4                                      Repeat_SetStop(clear_lcd_resp);
 297   4                                      Repeat_Start(10, 10, 0);
 298   4                              }
 299   3                              break;
 300   3                      case 0x04:  //USB
 301   3                              if (1 == buf[4]) {
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 6   

 302   4      //                              Repeat_SetStart(USB_time_show_lcd_resp);
 303   4      //                              Repeat_SetStop(0);
 304   4      //                              Repeat_Start(10, 1, 1);
 305   4                              } else if (2 == buf[4]) {
 306   4                                      Repeat_SetStart(USB_pause_show_lcd_resp);
 307   4                                      Repeat_SetStop(clear_lcd_resp);
 308   4                                      Repeat_Start(10, 10, 0);
 309   4                              }
 310   3                              break;
 311   3                      }
 312   2      
 313   2                      break;
 314   2              case MODE_CMD:
 315   2                      LCD_Clear_MHZ_ICO();
 316   2                      LCD_Clear_upColon_ICO();
 317   2                      LCD_Clear_downColon_ICO();
 318   2                      LCD_Clear_BLUETooTH_ICO();
 319   2                      LCD_Clear_FM_ICO();
 320   2                      LCD_Clear_AUX_ICO();
 321   2                      LCD_Clear_USB_ICO();
 322   2      
 323   2                      switch (buf[3]) {
 324   3                      case 0x01:  //BT
 325   3      
 326   3                              LCD_Show_BLUETooTH_ICO();
 327   3                              if (1 == buf[4]) {
 328   4                                      strcpy(tmpBuf, "PRIRED");
 329   4                              } else if (2 == buf[4]) {
 330   4                                      strcpy(tmpBuf, "PAIRING");
 331   4                              }
 332   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 333   3                              break;
 334   3                      case 0x02:  //FM
 335   3                              LCD_Show_FM_ICO();
 336   3                              LCD_Show_MHZ_ICO();
 337   3                              LCD_Clear_downColon_ICO();
 338   3      
 339   3                              if (buf[4] > 99) {
 340   4                                      sprintf(tmpBuf, "FM %u%u", buf[4], buf[5]);
 341   4                              } else if (buf[4] > 9) {
 342   4                                      sprintf(tmpBuf, "FM  %u%u", buf[4], buf[5]);
 343   4                              } else {
 344   4                                      sprintf(tmpBuf, "FM   %u%u", buf[4], buf[5]);
 345   4                              }
 346   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 347   3      
 348   3                              break;
 349   3                      case 0x03:  //AUX
 350   3                              LCD_Show_AUX_ICO();
 351   3                              if (1 == buf[4]) {
 352   4                                      strcpy(tmpBuf, "PLAY");
 353   4                              } else if (2 == buf[4]) {
 354   4                                      strcpy(tmpBuf, "MUTE");
 355   4                              }
 356   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 357   3      
 358   3                              break;
 359   3                      case 0x04:  //USB
 360   3                      {
 361   4                              uint16_t time = 0;
 362   4                              time = buf[4];
 363   4                              time <<= 8;
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 7   

 364   4                              time |= buf[5];
 365   4                              LCD_Show_USB_ICO();
 366   4      
 367   4                              if ((time / 60) > 99) {
 368   5                                      sprintf(tmpBuf, "   %u%02u", time / 60, time % 60);
 369   5                              } else if ((time / 60) > 9) {
 370   5                                      sprintf(tmpBuf, "    %u%02u", time / 60, time % 60);
 371   5                              } else {
 372   5                                      sprintf(tmpBuf, "     %u%02u", time / 60, time % 60);
 373   5                              }
 374   4                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 375   4                      }
 376   3                              break;
 377   3                      }
 378   2                      break;
 379   2              }
 380   1              if (index) {
 381   2                      index++;
 382   2      //      app_2d4_send(buf, index);
 383   2              }
 384   1      
 385   1      }
 386          
 387          void app_2d4_pro(void) {
 388   1              if (sendRcv_flag) {
 389   2      
 390   2                      switch (ucRF_GetStatus()) {
 391   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 392   3      
 393   3                              RF_ClearFIFO();
 394   3                              RF_ClearStatus();
 395   3      
 396   3                              sendRcv_flag = 0;
 397   3                              RF_RxMode();
 398   3      
 399   3      //                      key_bright_toggle();
 400   3      
 401   3                              break;
 402   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 403   3      
 404   3                              RF_ClearFIFO();
 405   3                              RF_ClearStatus();
 406   3                              break;
 407   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 408   3      
 409   3                              RF_ClearFIFO();
 410   3                              RF_ClearStatus();
 411   3                              break;
 412   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 413   3      
 414   3                              RF_TxData(sendBuf, PAYLOAD_WIDTH);
 415   3      
 416   3                              break;
 417   3                      }
 418   2      
 419   2              } else {
 420   2                      if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 421   3      
 422   3                              app_2d4_Rcv(rcvBuf);
 423   3                      }
 424   2      
 425   2              }
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/05/2017 23:07:01 PAGE 8   

 426   1      
 427   1      }
 428          #if 0
              void app_2d4_1S_pro(void) {
              
                      switch (g_tWork.mode) {
                              case 'B':
              
                              app_lcd_default_string_set(" PAIRING", 8);
                              LCD_Clear_MHZ_ICO();
              
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
              
                              break;
                              case 'F':
                              app_lcd_default_string_set("FM  821 ", 8);
                              LCD_Clear_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Show_MHZ_ICO();
                              break;
                              case 'A':
                              app_lcd_default_string_set("    PLAY", 8);
                              LCD_Clear_MHZ_ICO();
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
                              break;
                              case 'U':
                              app_lcd_default_string_set("     349", 8);
                              LCD_Show_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Clear_MHZ_ICO();
                              break;
                      }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2152    ----
   CONSTANT SIZE    =    223    ----
   XDATA SIZE       =     16      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
