C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          #define BT_MODE     0x01
  11          #define FM_MODE     0x02
  12          #define USB_MODE    0x03
  13          #define AUX_MODE    0x04
  14          #define DOME_MODE   0x05
  15          #define CALL_MODE   0x06
  16          
  17          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  18          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  19          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  20          
  21          static char tmpBuf[16] = { 0 };
  22          
  23          void app_2d4_init(void) {
  24   1      
  25   1              sendRcv_flag = 0;
  26   1              memset(rcvBuf, 0, PAYLOAD_WIDTH);
  27   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  28   1      
  29   1              RF_Init();
  30   1              RF_RxMode();
  31   1      
  32   1      //      RF_Carrier(1);
  33   1      }
  34          
  35          void app_2d4_send(uint8_t *d, uint8_t len) {
  36   1      
  37   1              if (len > PAYLOAD_WIDTH) {
  38   2                      return;
  39   2              }
  40   1      
  41   1              RF_TxMode();
  42   1              sendRcv_flag = 1;
  43   1      
  44   1              if (sendBuf != d) {
  45   2                      memcpy(sendBuf, d, len);
  46   2              }
  47   1      
  48   1      }
  49          static void speaker_status_resp(void) {
  50   1              if (g_tWork.status.bits.speaker) {
  51   2                      LCD_ShowString(" BAZOOKA");
  52   2              } else {
  53   2                      LCD_ShowString(" PWR OFF");
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 2   

  54   2              }
  55   1      }
  56          static void relay_status_resp(void) {
  57   1              if (g_tWork.status.bits.relay) {
  58   2                      LCD_ShowString("ACC ON");
  59   2              } else {
  60   2                      LCD_ShowString("ACC OFF");
  61   2              }
  62   1      
  63   1      }
  64          static void vol_resp(void) {
  65   1              char str[16] = { 0 };
  66   1      
  67   1      //      LCD_Clear_MHZ_ICO();
  68   1              LCD_Clear_upColon_ICO();
  69   1              LCD_Clear_downColon_ICO();
  70   1      
  71   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  72   1              LCD_ShowString(str);
  73   1      }
  74          
  75          static void clear_lcd_resp(void) {
  76   1              LCD_ShowString("        ");
  77   1      
  78   1              LCD_Clear_upColon_ICO();
  79   1              LCD_Clear_downColon_ICO();
  80   1      }
  81          static void BT_pause_show_lcd_resp(void) {
  82   1              LCD_ShowString("   PAUSE");
  83   1      }
  84          #if 0
              static void BT_play_show_lcd_resp(void) {
                      LCD_ShowString("    PLAY");
              }
              static void FM_scanning_show_lcd_resp(void) {
                      LCD_ShowString("SCANNING");
                      LCD_Clear_upColon_ICO();
                      LCD_Clear_downColon_ICO();
                      LCD_Clear_MHZ_ICO();
              }
              
              static void FM_ok_show_lcd_resp(void) {
                      LCD_ShowString("FM 1027 ");
                      LCD_Clear_upColon_ICO();
                      LCD_Show_downColon_ICO();
                      LCD_Show_MHZ_ICO();
              }
              #endif
 102          static void AUX_mute_show_lcd_resp(void) {
 103   1              LCD_ShowString("   MUTE ");
 104   1      }
 105          
 106          static void USB_pause_show_lcd_resp(void) {
 107   1              LCD_ShowString("   PAUSE");
 108   1              LCD_Clear_upColon_ICO();
 109   1              LCD_Clear_downColon_ICO();
 110   1      }
 111          #if 0
              static void USB_time_show_lcd_resp(void) {
                      LCD_ShowString("     349");
                      LCD_Show_upColon_ICO();
                      LCD_Show_downColon_ICO();
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 3   

              }
              #endif
 118          static void BT_next_show_lcd_resp(void) {
 119   1              LCD_ShowString("   NEXT ");
 120   1              LCD_Clear_upColon_ICO();
 121   1              LCD_Clear_downColon_ICO();
 122   1      }
 123          static void BT_prev_show_lcd_resp(void) {
 124   1              LCD_ShowString("   PREV ");
 125   1              LCD_Clear_upColon_ICO();
 126   1              LCD_Clear_downColon_ICO();
 127   1      }
 128          static void FM_station_show_lcd_resp(void) {
 129   1              sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 130   1              LCD_ShowString(tmpBuf);
 131   1              LCD_Clear_MHZ_ICO();
 132   1              LCD_Clear_upColon_ICO();
 133   1              LCD_Show_downColon_ICO();
 134   1      }
 135          static void USB_track_show_lcd_resp(void) {
 136   1              sprintf(tmpBuf, "TR %u", g_tWork.track);
 137   1              LCD_ShowString(tmpBuf);
 138   1              LCD_Clear_upColon_ICO();
 139   1              LCD_Clear_downColon_ICO();
 140   1      }
 141          static void LED_show_blink_name_show_lcd_resp(void) {
 142   1      //      sprintf(tmpBuf, "TR %u", g_tWork.track);
 143   1              LCD_ShowString(tmpBuf);
 144   1      //      LCD_ShowString("PAUSE");
 145   1              LCD_Clear_upColon_ICO();
 146   1              LCD_Clear_downColon_ICO();
 147   1      }
 148          static void LED_clear_blink_name_show_lcd_resp(void) {
 149   1              //      sprintf(tmpBuf, "TR %u", g_tWork.track);
 150   1              LCD_ShowString("        ");
 151   1              LCD_Clear_upColon_ICO();
 152   1              LCD_Clear_downColon_ICO();
 153   1      }
 154          
 155          //static char testbuf[16] = { 0 };
 156          
 157          static void app_2d4_Rcv(uint8_t *buf) {
 158   1              uint8_t i = 0;
 159   1              uint8_t index = 0;
 160   1              uint8_t check = 0;
 161   1      
 162   1              if (buf[0] != LAMP2LCD_HEADER) {
 163   2                      return;
 164   2              }
 165   1      //      key_bright_toggle();
 166   1              if (buf[1] > PAYLOAD_WIDTH) {
 167   2                      return;
 168   2              }
 169   1              for (i = 0; i < (buf[1] + 1); i++) {
 170   2                      check += buf[i + 1];
 171   2              }
 172   1              if (check != buf[buf[1] + 2]) {
 173   2                      return;
 174   2              }
 175   1      
 176   1      //              memset(testbuf, 0, 16);
 177   1      //      sprintf(testbuf, "R%02X", (uint16_t)buf[2]);
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 4   

 178   1      //      app_lcd_default_string_set(testbuf, strlen(testbuf));
 179   1      
 180   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
 181   1              index = 0;
 182   1              app_work_cnt_clear();
 183   1      //      switch (0) {
 184   1              switch (buf[2]) {
 185   2              case DEVICE_HEART_CMD:
 186   2                      app_work_cnt_clear();
 187   2                      break;
 188   2              case RCV_POWER_STATUS_CMD:
 189   2                      Repeat_Stop();
 190   2      
 191   2                      LCD_Clear_downColon_ICO();
 192   2                      LCD_Clear_upColon_ICO();
 193   2      
 194   2                      LCD_Clear_MHZ_ICO();
 195   2                      LCD_Clear_FM_ICO();
 196   2                      LCD_Clear_USB_ICO();
 197   2                      LCD_Clear_AUX_ICO();
 198   2                      LCD_Clear_BLUETooTH_ICO();
 199   2      
 200   2                      if (buf[3] == 0x01) {
 201   3                              g_tWork.status.bits.speaker = 1;
 202   3                              Repeat_SetStart(speaker_status_resp);
 203   3                              Repeat_SetStop(0);
 204   3                              Repeat_Start(50, 1, 1);
 205   3                      } else if (buf[3] == 0x02) {
 206   3                              g_tWork.status.bits.speaker = 0;
 207   3                              Repeat_SetStart(speaker_status_resp);
 208   3                              Repeat_SetStop(0);
 209   3                              Repeat_Start(20, 1, 0);
 210   3                      }
 211   2                      break;
 212   2              case RCV_X_BOX_STATUS_CMD:
 213   2      //              switch (buf[3]) {
 214   2      //              case BT_MODE:
 215   2      //
 216   2      //                      break;
 217   2      //              case FM_MODE:
 218   2      //
 219   2      //                      break;
 220   2      //              case AUX_MODE:  //AUX
 221   2      //
 222   2      //                      break;
 223   2      //              case USB_MODE:  //USB
 224   2      //
 225   2      //                      break;
 226   2      //              case DOME_MODE:  //LED
 227   2      //
 228   2      //                      break;
 229   2      //              case CALL_MODE:
 230   2      //                      break;
 231   2      //              }
 232   2      
 233   2                      break;
 234   2              case RCV_BT_STATUS_CMD:
 235   2                      switch (buf[3]) {
 236   3                      case BT_MODE:
 237   3      //                      Repeat_Stop();
 238   3                              if (g_tWork.mode != BT_MODE) {
 239   4                                      Repeat_Stop();
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 5   

 240   4                                      g_tWork.mode = BT_MODE;
 241   4                              }
 242   3                              LCD_Clear_MHZ_ICO();
 243   3                              LCD_Clear_FM_ICO();
 244   3                              LCD_Clear_USB_ICO();
 245   3                              LCD_Clear_AUX_ICO();
 246   3      
 247   3                              LCD_Show_BLUETooTH_ICO();
 248   3                              if (buf[4] == 0x01) {
 249   4                                      sprintf(tmpBuf, " PAIRING");
 250   4                              } else if (buf[4] == 0x02) {
 251   4                                      sprintf(tmpBuf, "  PAIRED");
 252   4                              } else if (buf[4] == 0x03) {
 253   4                                      sprintf(tmpBuf, "TWS SCAN");
 254   4                              } else if (buf[4] == 0x04) {
 255   4                                      sprintf(tmpBuf, "  TWS OK");
 256   4                              }
 257   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 258   3                              break;
 259   3                      case FM_MODE:
 260   3                              Repeat_Stop();
 261   3                              LCD_Clear_All();
 262   3      
 263   3                              sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 264   3                                              (uint16_t) buf[4]);
 265   3      
 266   3      //                      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 267   3      
 268   3                              break;
 269   3                      case AUX_MODE:  //AUX
 270   3      
 271   3                              break;
 272   3                      case USB_MODE:  //USB
 273   3      
 274   3                              break;
 275   3                      case DOME_MODE:  //LED
 276   3      
 277   3                              break;
 278   3                      case CALL_MODE:
 279   3                              break;
 280   3                      }
 281   2                      break;
 282   2              case RCV_PLAY_PAUSE_STATUS_CMD:
 283   2                      switch (buf[3]) {
 284   3                      case BT_MODE:
 285   3                              if (1 == buf[4]) {
 286   4                                      Repeat_Stop();
 287   4      
 288   4      //                              Repeat_SetStart(BT_play_show_lcd_resp);
 289   4      //                              Repeat_SetStop(0);
 290   4      //                              Repeat_Start(20, 1, 1);
 291   4      
 292   4                              } else if (2 == buf[4]) {
 293   4                                      Repeat_SetStart(BT_pause_show_lcd_resp);
 294   4                                      Repeat_SetStop(clear_lcd_resp);
 295   4                                      Repeat_Start(6, 6, 0);
 296   4                              }
 297   3                              break;
 298   3                      case FM_MODE:
 299   3                              if (2 == buf[4]) {
 300   4                                      sprintf(tmpBuf, "SCANNING");
 301   4                                      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 6   

 302   4                              } else if (1 == buf[4]) {
 303   4                                      //                              Repeat_SetStart(FM_ok_show_lcd_resp);
 304   4                                      //                              Repeat_SetStop(0);
 305   4                                      //                              Repeat_Start(10, 1, 1);
 306   4                              }
 307   3                              break;
 308   3                      case AUX_MODE:  //AUX
 309   3                      {
 310   4                              static BIT aux_pause_lock = 0;
 311   4                              LCD_Clear_downColon_ICO();
 312   4                              LCD_Clear_upColon_ICO();
 313   4      
 314   4                              LCD_Clear_MHZ_ICO();
 315   4                              LCD_Clear_FM_ICO();
 316   4                              LCD_Clear_USB_ICO();
 317   4                              LCD_Clear_AUX_ICO();
 318   4                              LCD_Clear_BLUETooTH_ICO();
 319   4      
 320   4                              LCD_Show_AUX_ICO();
 321   4                              if (1 == buf[4]) {
 322   5                                      if (aux_pause_lock) {
 323   6                                              Repeat_Stop();
 324   6                                              aux_pause_lock = 0;
 325   6                                      }
 326   5                                      sprintf(tmpBuf, "    PLAY");
 327   5                                      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 328   5                              } else if (2 == buf[4]) {
 329   5                                      aux_pause_lock = 1;
 330   5                                      Repeat_SetStart(AUX_mute_show_lcd_resp);
 331   5                                      Repeat_SetStop(clear_lcd_resp);
 332   5                                      Repeat_Start(7, 7, 0);
 333   5                              }
 334   4                      }
 335   3                              break;
 336   3                      case USB_MODE:  //USB
 337   3                              if (1 == buf[4]) {
 338   4                                      Repeat_Stop();
 339   4                                      //                              Repeat_SetStart(USB_time_show_lcd_resp);
 340   4                                      //                              Repeat_SetStop(0);
 341   4                                      //                              Repeat_Start(10, 1, 1);
 342   4                              } else if (2 == buf[4]) {
 343   4                                      Repeat_SetStart(USB_pause_show_lcd_resp);
 344   4                                      Repeat_SetStop(clear_lcd_resp);
 345   4                                      Repeat_Start(10, 10, 0);
 346   4                              }
 347   3                              break;
 348   3                      case DOME_MODE:  //LED
 349   3                              if (1 == buf[4]) { //pause
 350   4                                      memcpy(tmpBuf, buf + 5, 8);
 351   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 352   4                                      Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 353   4                                      Repeat_Start(6, 6, 0);
 354   4      
 355   4                              } else {
 356   4                                      app_lcd_default_string_set(buf + 5, 8, 0);
 357   4      //                              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 358   4      //                              Repeat_SetStop(0);
 359   4      //                              Repeat_Start(1, 1, 1);
 360   4                              }
 361   3                              break;
 362   3                      case CALL_MODE:
 363   3                              break;
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 7   

 364   3                      }
 365   2                      break;
 366   2              case RCV_PREV_NEXT_CMD:
 367   2                      switch (buf[3]) {
 368   3                      case BT_MODE:  //BT
 369   3                              if (buf[4] == 1) { //up
 370   4                                      Repeat_SetStart(BT_prev_show_lcd_resp);
 371   4                                      Repeat_SetStop(0);
 372   4                                      Repeat_Start(30, 1, 1);
 373   4                              } else if (buf[4] == 2) { //down
 374   4                                      Repeat_SetStart(BT_next_show_lcd_resp);
 375   4                                      Repeat_SetStop(0);
 376   4                                      Repeat_Start(30, 1, 1);
 377   4                              }
 378   3                              break;
 379   3                      case FM_MODE:  //FM
 380   3                              Repeat_Stop();
 381   3                              g_tWork.FM_station = buf[5];
 382   3                              Repeat_SetStart(FM_station_show_lcd_resp);
 383   3                              Repeat_SetStop(0);
 384   3                              Repeat_Start(30, 1, 1);
 385   3                              break;
 386   3                      case AUX_MODE:  //AUX
 387   3                              break;
 388   3                      case USB_MODE:  //USB
 389   3                              g_tWork.track = buf[6];
 390   3                              g_tWork.track |= (buf[5] << 8);
 391   3                              Repeat_SetStart(USB_track_show_lcd_resp);
 392   3                              Repeat_SetStop(0);
 393   3                              Repeat_Start(30, 1, 1);
 394   3      
 395   3                              break;
 396   3                      case DOME_MODE:  //LED
 397   3                              app_lcd_default_string_set(buf + 4, 8, 0);
 398   3                              break;
 399   3                      case CALL_MODE:
 400   3                              break;
 401   3                      default:
 402   3                              break;
 403   3                      }
 404   2                      break;
 405   2              case RCV_USB_PLAY_TIME_CMD:
 406   2                      if (g_tWork.mode != USB_MODE) {
 407   3                              Repeat_Stop();
 408   3                              g_tWork.mode = USB_MODE;
 409   3                      }
 410   2                      LCD_Clear_MHZ_ICO();
 411   2                      LCD_Clear_FM_ICO();
 412   2                      LCD_Clear_BLUETooTH_ICO();
 413   2                      LCD_Clear_AUX_ICO();
 414   2      
 415   2                      LCD_Show_USB_ICO();
 416   2                      if (buf[3] > 9) {
 417   3                              sprintf(tmpBuf, "    %u%02u", (uint16_t) buf[3], (uint16_t) buf[4]);
 418   3                      } else {
 419   3                              sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 420   3                                              (uint16_t) buf[4]);
 421   3                      }
 422   2                      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 3);
 423   2                      break;
 424   2              case RCV_FM_HZ_CMD:
 425   2                      if (g_tWork.mode != FM_MODE) {
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 8   

 426   3                              Repeat_Stop();
 427   3                              g_tWork.mode = FM_MODE;
 428   3                      }
 429   2      
 430   2                      LCD_Clear_USB_ICO();
 431   2                      LCD_Clear_MHZ_ICO();
 432   2                      LCD_Clear_BLUETooTH_ICO();
 433   2                      LCD_Clear_AUX_ICO();
 434   2      
 435   2                      LCD_Show_FM_ICO();
 436   2                      LCD_Show_MHZ_ICO();
 437   2      
 438   2                      if (buf[3] > 99) {
 439   3                              sprintf(tmpBuf, "FM %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 440   3                      } else if (buf[3] > 9) {
 441   3                              sprintf(tmpBuf, "FM  %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 442   3                      } else {
 443   3                              sprintf(tmpBuf, "FM   %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 444   3                      }
 445   2                      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 1);
 446   2                      break;
 447   2              case RCV_VOL_CMD:
 448   2                      g_tWork.vol = buf[3] & 0x7F;
 449   2                      Repeat_SetStart(vol_resp);
 450   2                      Repeat_SetStop(0);
 451   2                      Repeat_Start(30, 1, 1);
 452   2                      break;
 453   2      ////
 454   2              case KEY_POWER_SHORT_CMD:
 455   2                      if (1 == buf[3]) { //pause
 456   3                              memcpy(tmpBuf, buf + 4, 8);
 457   3                              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 458   3                              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 459   3                              Repeat_Start(6, 6, 0);
 460   3                      } else {
 461   3                              app_lcd_default_string_set(buf + 4, 8, 0);
 462   3                              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 463   3                              Repeat_SetStop(0);
 464   3                              Repeat_Start(1, 1, 1);
 465   3                      }
 466   2                      break;
 467   2              case KEY_ACC_CMD:
 468   2                      LCD_Clear_downColon_ICO();
 469   2                      LCD_Clear_upColon_ICO();
 470   2                      if (buf[3] == 1) {
 471   3                              g_tWork.status.bits.relay = 1;
 472   3                      } else {
 473   3                              g_tWork.status.bits.relay = 0;
 474   3                      }
 475   2                      Repeat_SetStart(relay_status_resp);
 476   2                      Repeat_SetStop(0);
 477   2                      Repeat_Start(20, 1, 1);
 478   2                      break;
 479   2              case KEY_DOME_CMD:
 480   2      #if 0
                              sendBuf[index++] = LAMP2LCD_HEADER;
                              sendBuf[index++] = 11;
                              sendBuf[index++] = KEY_DOME_CMD;
                              sendBuf[index++] = g_tWork.status.bits.DOME;
                              sendBuf[index++] = g_tWork.status.bits.pause;
                              app_dome_get_current_Name(sendBuf + index, 8);
                              index += 8;
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 9   

                              for (i = 0; i < (sendBuf[1] + 1); i++) {
                                      sendBuf[index] += sendBuf[i + 1];
                              }
              #endif
 492   2                      if (buf[3] == 1) {
 493   3                              LCD_Show_LED_ICO();
 494   3                              if (1 == buf[4]) { //pause
 495   4                                      memcpy(tmpBuf, buf + 5, 8);
 496   4                                      for (i = 0; i < sizeof(tmpBuf); i++) {
 497   5                                              if (*(tmpBuf + i) == 0) {
 498   6                                                      *(tmpBuf + i) = ' ';
 499   6                                              }
 500   5                                      }
 501   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 502   4                                      Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 503   4                                      Repeat_Start(5, 5, 0);
 504   4                              } else {
 505   4      //                              memcpy(tmpBuf, buf + 5, 8);
 506   4                                      app_lcd_default_string_set(buf + 5, 8, 0);
 507   4      
 508   4      //                              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 509   4      //                              Repeat_SetStop(0);
 510   4      //                              Repeat_Start(1, 1, 1);
 511   4                              }
 512   3                      } else {
 513   3                              LCD_Clear_LED_ICO();
 514   3                      }
 515   2                      break;
 516   2              case KEY_UP_CMD:
 517   2                      memcpy(tmpBuf, buf + 3, 8);
 518   2                      app_lcd_default_string_set(buf + 3, 8, 0);
 519   2                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 520   2                      Repeat_SetStop(0);
 521   2                      Repeat_Start(1, 1, 1);
 522   2                      break;
 523   2              case KEY_DOWN_CMD:
 524   2                      memcpy(tmpBuf, buf + 3, 8);
 525   2                      app_lcd_default_string_set(buf + 3, 8, 0);
 526   2                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 527   2                      Repeat_SetStop(0);
 528   2                      Repeat_Start(1, 1, 1);
 529   2                      break;
 530   2              case MODE_CHANGE_CMD:
 531   2                      LCD_Clear_MHZ_ICO();
 532   2                      LCD_Clear_upColon_ICO();
 533   2                      LCD_Clear_downColon_ICO();
 534   2                      LCD_Clear_BLUETooTH_ICO();
 535   2                      LCD_Clear_FM_ICO();
 536   2                      LCD_Clear_AUX_ICO();
 537   2                      LCD_Clear_USB_ICO();
 538   2      
 539   2                      switch (buf[3]) {
 540   3                      case BT_MODE:  //BT
 541   3                              LCD_Show_BLUETooTH_ICO();
 542   3                              if (1 == buf[4]) {
 543   4                                      strcpy(tmpBuf, "PRIRED");
 544   4                              } else if (2 == buf[4]) {
 545   4                                      strcpy(tmpBuf, "PAIRING");
 546   4                              }
 547   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 548   3                              break;
 549   3                      case FM_MODE:  //FM
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 10  

 550   3      
 551   3                              break;
 552   3                      case AUX_MODE:  //AUX
 553   3                              LCD_Show_AUX_ICO();
 554   3                              if (1 == buf[4]) {
 555   4                                      strcpy(tmpBuf, "PLAY");
 556   4                              } else if (2 == buf[4]) {
 557   4                                      strcpy(tmpBuf, "MUTE");
 558   4                              }
 559   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 560   3                              break;
 561   3                      case USB_MODE:  //USB
 562   3      
 563   3                              break;
 564   3                      }
 565   2                      break;
 566   2              }
 567   1      
 568   1              if (index) {
 569   2                      index++;
 570   2      //      app_2d4_send(buf, index);
 571   2              }
 572   1      
 573   1      }
 574          
 575          void app_2d4_pro(void) {
 576   1              uint8_t i = 0;
 577   1              if (sendRcv_flag) {
 578   2                      switch (ucRF_GetStatus()) {
 579   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 580   3      
 581   3                              RF_ClearFIFO();
 582   3                              RF_ClearStatus();
 583   3      
 584   3                              sendRcv_flag = 0;
 585   3      
 586   3                              for (i = 0; i < 100; i++) {
 587   4                                      nop
 588   4                                      nop
 589   4                              }
 590   3      
 591   3                              RF_RxMode();
 592   3      
 593   3                              for (i = 0; i < 100; i++) {
 594   4                                      nop
 595   4                                      nop
 596   4                              }
 597   3      //                      key_bright_toggle();
 598   3      
 599   3                              break;
 600   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 601   3      
 602   3                              RF_ClearFIFO();
 603   3                              RF_ClearStatus();
 604   3                              break;
 605   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 606   3      
 607   3                              RF_ClearFIFO();
 608   3                              RF_ClearStatus();
 609   3                              break;
 610   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 611   3      
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 11  

 612   3                              for (i = 0; i < 130; i++) {
 613   4                                      nop
 614   4                                      nop
 615   4                              }
 616   3      
 617   3                              RF_TxData(sendBuf, PAYLOAD_WIDTH);
 618   3      
 619   3                              break;
 620   3                      }
 621   2      
 622   2              } else {
 623   2                      if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 624   3      
 625   3                              app_2d4_Rcv(rcvBuf);
 626   3                      }
 627   2      
 628   2              }
 629   1      
 630   1      }
 631          #if 0
              void app_2d4_1S_pro(void) {
              
                      switch (g_tWork.mode) {
                              case 'B':
              
                              app_lcd_default_string_set(" PAIRING", 8);
                              LCD_Clear_MHZ_ICO();
              
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
              
                              break;
                              case 'F':
                              app_lcd_default_string_set("FM  821 ", 8);
                              LCD_Clear_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Show_MHZ_ICO();
                              break;
                              case 'A':
                              app_lcd_default_string_set("    PLAY", 8);
                              LCD_Clear_MHZ_ICO();
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
                              break;
                              case 'U':
                              app_lcd_default_string_set("     349", 8);
                              LCD_Show_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Clear_MHZ_ICO();
                              break;
                      }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3187    ----
   CONSTANT SIZE    =    246    ----
   XDATA SIZE       =     16      27
C51 COMPILER V9.56.0.0   APP_2D4                                                           12/06/2017 22:51:12 PAGE 12  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
