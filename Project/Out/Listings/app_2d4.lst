C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) TABS(
                    -2) OBJECT(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017年8月16日
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          #define BT_MODE     0x01
  11          #define FM_MODE     0x02
  12          #define USB_MODE    0x03
  13          #define AUX_MODE    0x04
  14          #define DOME_MODE   0x05
  15          #define CALL_MODE   0x06
  16          
  17          static idata uint8_t sendRcv_flag = 0; //0 rcv， 1 send
  18          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  19          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  20          
  21          static char tmpBuf[16] = { 0 };
  22          
  23          void app_2d4_init(void) {
  24   1      
  25   1        sendRcv_flag = 0;
  26   1        memset(rcvBuf, 0, PAYLOAD_WIDTH);
  27   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  28   1      
  29   1        RF_Init();
  30   1        RF_RxMode();
  31   1      
  32   1      //  RF_Carrier(1);
  33   1      }
  34          
  35          void app_2d4_send(uint8_t *d, uint8_t len) {
  36   1      
  37   1        if (len > PAYLOAD_WIDTH) {
  38   2          return;
  39   2        }
  40   1      
  41   1        RF_TxMode();
  42   1        sendRcv_flag = 1;
  43   1      
  44   1        if (sendBuf != d) {
  45   2          memcpy(sendBuf, d, len);
  46   2        }
  47   1      
  48   1      }
  49          static void speaker_status_resp(void) {
  50   1        if (g_tWork.status.bits.speaker) {
  51   2          LCD_ShowString(" BAZOOKA");
  52   2        } else {
  53   2          LCD_ShowString(" PWR OFF");
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 2   

  54   2        }
  55   1      }
  56          static void relay_status_resp(void) {
  57   1        if (g_tWork.status.bits.relay) {
  58   2          LCD_ShowString("ACC ON");
  59   2        } else {
  60   2          LCD_ShowString("ACC OFF");
  61   2        }
  62   1      
  63   1      }
  64          static void vol_resp(void) {
  65   1        char str[16] = { 0 };
  66   1      
  67   1      //  LCD_Clear_MHZ_ICO();
  68   1        LCD_Clear_upColon_ICO();
  69   1        LCD_Clear_downColon_ICO();
  70   1      
  71   1        sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  72   1        LCD_ShowString(str);
  73   1      }
  74          
  75          static void clear_lcd_resp(void) {
  76   1        LCD_ShowString("        ");
  77   1      
  78   1        LCD_Clear_upColon_ICO();
  79   1        LCD_Clear_downColon_ICO();
  80   1      }
  81          static void BT_pause_show_lcd_resp(void) {
  82   1        LCD_ShowString("   PAUSE");
  83   1      }
  84          #if 0
              static void BT_play_show_lcd_resp(void) {
                LCD_ShowString("    PLAY");
              }
              static void FM_scanning_show_lcd_resp(void) {
                LCD_ShowString("SCANNING");
                LCD_Clear_upColon_ICO();
                LCD_Clear_downColon_ICO();
                LCD_Clear_MHZ_ICO();
              }
              
              static void FM_ok_show_lcd_resp(void) {
                LCD_ShowString("FM 1027 ");
                LCD_Clear_upColon_ICO();
                LCD_Show_downColon_ICO();
                LCD_Show_MHZ_ICO();
              }
              #endif
 102          static void AUX_mute_show_lcd_resp(void) {
 103   1        LCD_ShowString("   MUTE ");
 104   1      }
 105          
 106          static void USB_pause_show_lcd_resp(void) {
 107   1        LCD_ShowString("   PAUSE");
 108   1        LCD_Clear_upColon_ICO();
 109   1        LCD_Clear_downColon_ICO();
 110   1      }
 111          #if 0
              static void USB_time_show_lcd_resp(void) {
                LCD_ShowString("     349");
                LCD_Show_upColon_ICO();
                LCD_Show_downColon_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 3   

              }
              #endif
 118          static void BT_next_show_lcd_resp(void) {
 119   1        LCD_ShowString("   NEXT ");
 120   1        LCD_Clear_upColon_ICO();
 121   1        LCD_Clear_downColon_ICO();
 122   1      }
 123          static void BT_prev_show_lcd_resp(void) {
 124   1        LCD_ShowString("   PREV ");
 125   1        LCD_Clear_upColon_ICO();
 126   1        LCD_Clear_downColon_ICO();
 127   1      }
 128          static void FM_station_show_lcd_resp(void) {
 129   1        sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 130   1        LCD_ShowString(tmpBuf);
 131   1        LCD_Clear_MHZ_ICO();
 132   1        LCD_Clear_upColon_ICO();
 133   1        LCD_Show_downColon_ICO();
 134   1      }
 135          static void USB_track_show_lcd_resp(void) {
 136   1        sprintf(tmpBuf, "TR %u", g_tWork.track);
 137   1        LCD_ShowString(tmpBuf);
 138   1        LCD_Clear_upColon_ICO();
 139   1        LCD_Clear_downColon_ICO();
 140   1      }
 141          static void LED_show_blink_name_show_lcd_resp(void) {
 142   1      //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 143   1        LCD_ShowString(tmpBuf);
 144   1      //  LCD_ShowString("PAUSE");
 145   1        LCD_Clear_upColon_ICO();
 146   1        LCD_Clear_downColon_ICO();
 147   1      }
 148          static void LED_clear_blink_name_show_lcd_resp(void) {
 149   1        //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 150   1        LCD_ShowString("        ");
 151   1        LCD_Clear_upColon_ICO();
 152   1        LCD_Clear_downColon_ICO();
 153   1      }
 154          
 155          //static char testbuf[16] = { 0 };
 156          
 157          static void app_2d4_Rcv(uint8_t *buf) {
 158   1        uint8_t i = 0;
 159   1        uint8_t index = 0;
 160   1        uint8_t check = 0;
 161   1      
 162   1        if (buf[0] != LAMP2LCD_HEADER) {
 163   2          return;
 164   2        }
 165   1      //  key_bright_toggle();
 166   1        if (buf[1] > PAYLOAD_WIDTH) {
 167   2          return;
 168   2        }
 169   1        for (i = 0; i < (buf[1] + 1); i++) {
 170   2          check += buf[i + 1];
 171   2        }
 172   1        if (check != buf[buf[1] + 2]) {
 173   2          return;
 174   2        }
 175   1      
 176   1      //    memset(testbuf, 0, 16);
 177   1      //  sprintf(testbuf, "R%02X", (uint16_t)buf[2]);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 4   

 178   1      //  app_lcd_default_string_set(testbuf, strlen(testbuf));
 179   1      
 180   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
 181   1        index = 0;
 182   1        app_work_cnt_clear();
 183   1      //  switch (0) {
 184   1        switch (buf[2]) {
 185   2        case LED_MODE_MSG_CMD: {
 186   3          LED_MODE_MSG_ST led_mode_msg;
 187   3          memset((uint8_t *) &led_mode_msg, 0, sizeof(LED_MODE_MSG_ST));
 188   3      
 189   3          LCD_Show_LED_ICO();
 190   3      
 191   3          LCD_Clear_MHZ_ICO();
 192   3          LCD_Clear_FM_ICO();
 193   3          LCD_Clear_USB_ICO();
 194   3          LCD_Clear_AUX_ICO();
 195   3          LCD_Clear_BLUETooTH_ICO();
 196   3          switch (buf[3]) { //蓝牙模块工作模式
 197   4          case BT_MODE:
 198   4            LCD_Show_BLUETooTH_ICO();
 199   4            break;
 200   4          case FM_MODE:
 201   4            LCD_Show_FM_ICO();
 202   4            break;
 203   4          case USB_MODE:
 204   4            LCD_Show_USB_ICO();
 205   4            break;
 206   4          case AUX_MODE:
 207   4            LCD_Show_AUX_ICO();
 208   4            break;
 209   4          case DOME_MODE:
 210   4            break;
 211   4          case CALL_MODE:
 212   4            break;
 213   4          }
 214   3      
 215   3          memset((uint8_t *) tmpBuf, 0, sizeof(tmpBuf));
 216   3          memcpy(tmpBuf, buf + 4, 8);
 217   3          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 218   3      
 219   3          led_mode_msg.status.allbits = buf[12];
 220   3          if (led_mode_msg.status.bits.pp) {
 221   4            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 222   4            Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 223   4            if (0 == app_repeat_IsEnable()) {
 224   5              Repeat_Start(6, 6, 0);
 225   5            }
 226   4          } else {
 227   4            if (app_repeat_IsEnable()) {
 228   5              Repeat_Stop();
 229   5            }
 230   4          }
 231   3      
 232   3        }
 233   2          break;
 234   2        case RCV_POWER_STATUS_CMD:
 235   2          Repeat_Stop();
 236   2      
 237   2          LCD_Clear_downColon_ICO();
 238   2          LCD_Clear_upColon_ICO();
 239   2      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 5   

 240   2          LCD_Clear_MHZ_ICO();
 241   2          LCD_Clear_FM_ICO();
 242   2          LCD_Clear_USB_ICO();
 243   2          LCD_Clear_AUX_ICO();
 244   2          LCD_Clear_BLUETooTH_ICO();
 245   2      
 246   2          if (buf[3] == 0x01) {
 247   3            g_tWork.status.bits.speaker = 1;
 248   3            Repeat_SetStart(speaker_status_resp);
 249   3            Repeat_SetStop(0);
 250   3            Repeat_Start(50, 1, 1);
 251   3          } else if (buf[3] == 0x02) {
 252   3            g_tWork.status.bits.speaker = 0;
 253   3            Repeat_SetStart(speaker_status_resp);
 254   3            Repeat_SetStop(0);
 255   3            Repeat_Start(20, 1, 0);
 256   3          }
 257   2          break;
 258   2        case RCV_X_BOX_STATUS_CMD:
 259   2      //    switch (buf[3]) {
 260   2      //    case BT_MODE:
 261   2      //
 262   2      //      break;
 263   2      //    case FM_MODE:
 264   2      //
 265   2      //      break;
 266   2      //    case AUX_MODE:  //AUX
 267   2      //
 268   2      //      break;
 269   2      //    case USB_MODE:  //USB
 270   2      //
 271   2      //      break;
 272   2      //    case DOME_MODE:  //LED
 273   2      //
 274   2      //      break;
 275   2      //    case CALL_MODE:
 276   2      //      break;
 277   2      //    }
 278   2      
 279   2          break;
 280   2        case RCV_BT_STATUS_CMD:
 281   2          switch (buf[3]) {
 282   3          case BT_MODE:
 283   3      //      Repeat_Stop();
 284   3            if (g_tWork.mode != BT_MODE) {
 285   4              Repeat_Stop();
 286   4              g_tWork.mode = BT_MODE;
 287   4            }
 288   3            LCD_Clear_MHZ_ICO();
 289   3            LCD_Clear_FM_ICO();
 290   3            LCD_Clear_USB_ICO();
 291   3            LCD_Clear_AUX_ICO();
 292   3      
 293   3            LCD_Show_BLUETooTH_ICO();
 294   3            if (buf[4] == 0x01) {
 295   4              sprintf(tmpBuf, " PAIRING");
 296   4            } else if (buf[4] == 0x02) {
 297   4              sprintf(tmpBuf, "  PAIRED");
 298   4            } else if (buf[4] == 0x03) {
 299   4              sprintf(tmpBuf, "TWS SCAN");
 300   4            } else if (buf[4] == 0x04) {
 301   4              sprintf(tmpBuf, "  TWS OK");
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 6   

 302   4            }
 303   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 304   3            break;
 305   3          case FM_MODE:
 306   3            Repeat_Stop();
 307   3            LCD_Clear_All();
 308   3      
 309   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 310   3                (uint16_t) buf[4]);
 311   3      
 312   3      //      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 313   3      
 314   3            break;
 315   3          case AUX_MODE:  //AUX
 316   3      
 317   3            break;
 318   3          case USB_MODE:  //USB
 319   3      
 320   3            break;
 321   3          case DOME_MODE:  //LED
 322   3      
 323   3            break;
 324   3          case CALL_MODE:
 325   3            break;
 326   3          }
 327   2          break;
 328   2        case RCV_PLAY_PAUSE_STATUS_CMD:
 329   2          switch (buf[3]) {
 330   3          case BT_MODE:
 331   3            if (1 == buf[4]) {
 332   4              Repeat_Stop();
 333   4      
 334   4      //        Repeat_SetStart(BT_play_show_lcd_resp);
 335   4      //        Repeat_SetStop(0);
 336   4      //        Repeat_Start(20, 1, 1);
 337   4      
 338   4            } else if (2 == buf[4]) {
 339   4              Repeat_SetStart(BT_pause_show_lcd_resp);
 340   4              Repeat_SetStop(clear_lcd_resp);
 341   4              Repeat_Start(6, 6, 0);
 342   4            }
 343   3            break;
 344   3          case FM_MODE:
 345   3            if (2 == buf[4]) {
 346   4              sprintf(tmpBuf, "SCANNING");
 347   4              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 348   4            } else if (1 == buf[4]) {
 349   4              //        Repeat_SetStart(FM_ok_show_lcd_resp);
 350   4              //        Repeat_SetStop(0);
 351   4              //        Repeat_Start(10, 1, 1);
 352   4            }
 353   3            break;
 354   3          case AUX_MODE:  //AUX
 355   3          {
 356   4            static BIT aux_pause_lock = 0;
 357   4            LCD_Clear_downColon_ICO();
 358   4            LCD_Clear_upColon_ICO();
 359   4      
 360   4            LCD_Clear_MHZ_ICO();
 361   4            LCD_Clear_FM_ICO();
 362   4            LCD_Clear_USB_ICO();
 363   4            LCD_Clear_AUX_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 7   

 364   4            LCD_Clear_BLUETooTH_ICO();
 365   4      
 366   4            LCD_Show_AUX_ICO();
 367   4            if (1 == buf[4]) {
 368   5              if (aux_pause_lock) {
 369   6                Repeat_Stop();
 370   6                aux_pause_lock = 0;
 371   6              }
 372   5              sprintf(tmpBuf, "    PLAY");
 373   5              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 374   5            } else if (2 == buf[4]) {
 375   5              aux_pause_lock = 1;
 376   5              Repeat_SetStart(AUX_mute_show_lcd_resp);
 377   5              Repeat_SetStop(clear_lcd_resp);
 378   5              Repeat_Start(7, 7, 0);
 379   5            }
 380   4          }
 381   3            break;
 382   3          case USB_MODE:  //USB
 383   3            if (1 == buf[4]) {
 384   4              Repeat_Stop();
 385   4              //        Repeat_SetStart(USB_time_show_lcd_resp);
 386   4              //        Repeat_SetStop(0);
 387   4              //        Repeat_Start(10, 1, 1);
 388   4            } else if (2 == buf[4]) {
 389   4              Repeat_SetStart(USB_pause_show_lcd_resp);
 390   4              Repeat_SetStop(clear_lcd_resp);
 391   4              Repeat_Start(10, 10, 0);
 392   4            }
 393   3            break;
 394   3          case DOME_MODE:  //LED
 395   3            if (1 == buf[4]) { //pause
 396   4              memcpy(tmpBuf, buf + 5, 8);
 397   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 398   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 399   4              Repeat_Start(6, 6, 0);
 400   4      
 401   4            } else {
 402   4              app_lcd_default_string_set(buf + 5, 8, 0);
 403   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 404   4      //        Repeat_SetStop(0);
 405   4      //        Repeat_Start(1, 1, 1);
 406   4            }
 407   3            break;
 408   3          case CALL_MODE:
 409   3            break;
 410   3          }
 411   2          break;
 412   2        case RCV_PREV_NEXT_CMD:
 413   2          switch (buf[3]) {
 414   3          case BT_MODE:  //BT
 415   3            if (buf[4] == 1) { //up
 416   4              Repeat_SetStart(BT_prev_show_lcd_resp);
 417   4              Repeat_SetStop(0);
 418   4              Repeat_Start(30, 1, 1);
 419   4            } else if (buf[4] == 2) { //down
 420   4              Repeat_SetStart(BT_next_show_lcd_resp);
 421   4              Repeat_SetStop(0);
 422   4              Repeat_Start(30, 1, 1);
 423   4            }
 424   3            break;
 425   3          case FM_MODE:  //FM
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 8   

 426   3            Repeat_Stop();
 427   3            g_tWork.FM_station = buf[5];
 428   3            Repeat_SetStart(FM_station_show_lcd_resp);
 429   3            Repeat_SetStop(0);
 430   3            Repeat_Start(30, 1, 1);
 431   3            break;
 432   3          case AUX_MODE:  //AUX
 433   3            break;
 434   3          case USB_MODE:  //USB
 435   3            g_tWork.track = buf[6];
 436   3            g_tWork.track |= (buf[5] << 8);
 437   3            Repeat_SetStart(USB_track_show_lcd_resp);
 438   3            Repeat_SetStop(0);
 439   3            Repeat_Start(30, 1, 1);
 440   3      
 441   3            break;
 442   3          case DOME_MODE:  //LED
 443   3            app_lcd_default_string_set(buf + 4, 8, 0);
 444   3            break;
 445   3          case CALL_MODE:
 446   3            break;
 447   3          default:
 448   3            break;
 449   3          }
 450   2          break;
 451   2        case RCV_USB_PLAY_TIME_CMD:
 452   2          if (g_tWork.mode != USB_MODE) {
 453   3            Repeat_Stop();
 454   3            g_tWork.mode = USB_MODE;
 455   3          }
 456   2          LCD_Clear_MHZ_ICO();
 457   2          LCD_Clear_FM_ICO();
 458   2          LCD_Clear_BLUETooTH_ICO();
 459   2          LCD_Clear_AUX_ICO();
 460   2      
 461   2          LCD_Show_USB_ICO();
 462   2          if (buf[3] > 9) {
 463   3            sprintf(tmpBuf, "    %u%02u", (uint16_t) buf[3], (uint16_t) buf[4]);
 464   3          } else {
 465   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 466   3                (uint16_t) buf[4]);
 467   3          }
 468   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 3);
 469   2          break;
 470   2        case RCV_FM_HZ_CMD:
 471   2          if (g_tWork.mode != FM_MODE) {
 472   3            Repeat_Stop();
 473   3            g_tWork.mode = FM_MODE;
 474   3          }
 475   2      
 476   2          LCD_Clear_USB_ICO();
 477   2          LCD_Clear_MHZ_ICO();
 478   2          LCD_Clear_BLUETooTH_ICO();
 479   2          LCD_Clear_AUX_ICO();
 480   2      
 481   2          LCD_Show_FM_ICO();
 482   2          LCD_Show_MHZ_ICO();
 483   2      
 484   2          if (buf[3] > 99) {
 485   3            sprintf(tmpBuf, "FM %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 486   3          } else if (buf[3] > 9) {
 487   3            sprintf(tmpBuf, "FM  %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 9   

 488   3          } else {
 489   3            sprintf(tmpBuf, "FM   %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 490   3          }
 491   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 1);
 492   2          break;
 493   2        case RCV_VOL_CMD:
 494   2          g_tWork.vol = buf[3] & 0x7F;
 495   2          Repeat_SetStart(vol_resp);
 496   2          Repeat_SetStop(0);
 497   2          Repeat_Start(30, 1, 1);
 498   2          break;
 499   2      ////
 500   2        case KEY_POWER_SHORT_CMD:
 501   2          if (1 == buf[3]) { //pause
 502   3            memcpy(tmpBuf, buf + 4, 8);
 503   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 504   3            Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 505   3            Repeat_Start(6, 6, 0);
 506   3          } else {
 507   3            app_lcd_default_string_set(buf + 4, 8, 0);
 508   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 509   3            Repeat_SetStop(0);
 510   3            Repeat_Start(1, 1, 1);
 511   3          }
 512   2          break;
 513   2        case KEY_ACC_CMD:
 514   2          LCD_Clear_downColon_ICO();
 515   2          LCD_Clear_upColon_ICO();
 516   2          if (buf[3] == 1) {
 517   3            g_tWork.status.bits.relay = 1;
 518   3          } else {
 519   3            g_tWork.status.bits.relay = 0;
 520   3          }
 521   2          Repeat_SetStart(relay_status_resp);
 522   2          Repeat_SetStop(0);
 523   2          Repeat_Start(20, 1, 1);
 524   2          break;
 525   2        case KEY_DOME_CMD:
 526   2      #if 0
                  sendBuf[index++] = LAMP2LCD_HEADER;
                  sendBuf[index++] = 11;
                  sendBuf[index++] = KEY_DOME_CMD;
                  sendBuf[index++] = g_tWork.status.bits.DOME;
                  sendBuf[index++] = g_tWork.status.bits.pause;
                  app_dome_get_current_Name(sendBuf + index, 8);
                  index += 8;
                  for (i = 0; i < (sendBuf[1] + 1); i++) {
                    sendBuf[index] += sendBuf[i + 1];
                  }
              #endif
 538   2          if (buf[3] == 1) {
 539   3            LCD_Show_LED_ICO();
 540   3            if (1 == buf[4]) { //pause
 541   4              memcpy(tmpBuf, buf + 5, 8);
 542   4              for (i = 0; i < sizeof(tmpBuf); i++) {
 543   5                if (*(tmpBuf + i) == 0) {
 544   6                  *(tmpBuf + i) = ' ';
 545   6                }
 546   5              }
 547   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 548   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 549   4              Repeat_Start(5, 5, 0);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 10  

 550   4            } else {
 551   4      //        memcpy(tmpBuf, buf + 5, 8);
 552   4              app_lcd_default_string_set(buf + 5, 8, 0);
 553   4      
 554   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 555   4      //        Repeat_SetStop(0);
 556   4      //        Repeat_Start(1, 1, 1);
 557   4            }
 558   3          } else {
 559   3            LCD_Clear_LED_ICO();
 560   3          }
 561   2          break;
 562   2        case KEY_UP_CMD:
 563   2          memcpy(tmpBuf, buf + 3, 8);
 564   2          app_lcd_default_string_set(buf + 3, 8, 0);
 565   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 566   2          Repeat_SetStop(0);
 567   2          Repeat_Start(1, 1, 1);
 568   2          break;
 569   2        case KEY_DOWN_CMD:
 570   2          memcpy(tmpBuf, buf + 3, 8);
 571   2          app_lcd_default_string_set(buf + 3, 8, 0);
 572   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 573   2          Repeat_SetStop(0);
 574   2          Repeat_Start(1, 1, 1);
 575   2          break;
 576   2        case MODE_CHANGE_CMD:
 577   2          LCD_Clear_MHZ_ICO();
 578   2          LCD_Clear_upColon_ICO();
 579   2          LCD_Clear_downColon_ICO();
 580   2          LCD_Clear_BLUETooTH_ICO();
 581   2          LCD_Clear_FM_ICO();
 582   2          LCD_Clear_AUX_ICO();
 583   2          LCD_Clear_USB_ICO();
 584   2      
 585   2          switch (buf[3]) {
 586   3          case BT_MODE:  //BT
 587   3            LCD_Show_BLUETooTH_ICO();
 588   3            if (1 == buf[4]) {
 589   4              strcpy(tmpBuf, "PRIRED");
 590   4            } else if (2 == buf[4]) {
 591   4              strcpy(tmpBuf, "PAIRING");
 592   4            }
 593   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 594   3            break;
 595   3          case FM_MODE:  //FM
 596   3      
 597   3            break;
 598   3          case AUX_MODE:  //AUX
 599   3            LCD_Show_AUX_ICO();
 600   3            if (1 == buf[4]) {
 601   4              strcpy(tmpBuf, "PLAY");
 602   4            } else if (2 == buf[4]) {
 603   4              strcpy(tmpBuf, "MUTE");
 604   4            }
 605   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 606   3            break;
 607   3          case USB_MODE:  //USB
 608   3      
 609   3            break;
 610   3          }
 611   2          break;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 11  

 612   2        }
 613   1      
 614   1        if (index) {
 615   2          index++;
 616   2      //  app_2d4_send(buf, index);
 617   2        }
 618   1      
 619   1      }
 620          
 621          void app_2d4_pro(void) {
 622   1        uint8_t i = 0;
 623   1        if (sendRcv_flag) {
 624   2          switch (ucRF_GetStatus()) {
 625   3          case TX_DS_FLAG:    // 普通型发送完成 或 增强型发送成功
 626   3      
 627   3            RF_ClearFIFO();
 628   3            RF_ClearStatus();
 629   3      
 630   3            sendRcv_flag = 0;
 631   3      
 632   3            for (i = 0; i < 100; i++) {
 633   4              nop
 634   4              nop
 635   4            }
 636   3      
 637   3            RF_RxMode();
 638   3      
 639   3            for (i = 0; i < 100; i++) {
 640   4              nop
 641   4              nop
 642   4            }
 643   3      //      key_bright_toggle();
 644   3      
 645   3            break;
 646   3          case RX_DR_FLAG:    //发送成功且收到payload
 647   3      
 648   3            RF_ClearFIFO();
 649   3            RF_ClearStatus();
 650   3            break;
 651   3          case MAX_RT_FLAG:   // 增强型发送超时失败
 652   3      
 653   3            RF_ClearFIFO();
 654   3            RF_ClearStatus();
 655   3            break;
 656   3          default:    // rf 处于空闲状态才发送数据
 657   3      
 658   3            for (i = 0; i < 130; i++) {
 659   4              nop
 660   4              nop
 661   4            }
 662   3      
 663   3            RF_TxData(sendBuf, PAYLOAD_WIDTH);
 664   3      
 665   3            break;
 666   3          }
 667   2      
 668   2        } else {
 669   2          if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 670   3      
 671   3            app_2d4_Rcv(rcvBuf);
 672   3          }
 673   2      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 17:13:43 PAGE 12  

 674   2        }
 675   1      
 676   1      }
 677          #if 0
              void app_2d4_1S_pro(void) {
              
                switch (g_tWork.mode) {
                  case 'B':
              
                  app_lcd_default_string_set(" PAIRING", 8);
                  LCD_Clear_MHZ_ICO();
              
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
              
                  break;
                  case 'F':
                  app_lcd_default_string_set("FM  821 ", 8);
                  LCD_Clear_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Show_MHZ_ICO();
                  break;
                  case 'A':
                  app_lcd_default_string_set("    PLAY", 8);
                  LCD_Clear_MHZ_ICO();
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
                  break;
                  case 'U':
                  app_lcd_default_string_set("     349", 8);
                  LCD_Show_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Clear_MHZ_ICO();
                  break;
                }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3398    ----
   CONSTANT SIZE    =    246    ----
   XDATA SIZE       =     16      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
