C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  11          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  12          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  13          
  14          static char tmpBuf[16] = { 0 };
  15          
  16          void app_2d4_init(void) {
  17   1      
  18   1              sendRcv_flag = 0;
  19   1              memset(rcvBuf, 0, PAYLOAD_WIDTH);
  20   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  21   1      
  22   1              RF_Init();
  23   1              RF_RxMode();
  24   1      
  25   1      //      RF_Carrier(1);
  26   1      }
  27          
  28          void app_2d4_send(uint8_t *d, uint8_t len) {
  29   1      
  30   1              if (len > PAYLOAD_WIDTH) {
  31   2                      return;
  32   2              }
  33   1      
  34   1              RF_TxMode();
  35   1              sendRcv_flag = 1;
  36   1      
  37   1              if (sendBuf != d) {
  38   2                      memcpy(sendBuf, d, len);
  39   2              }
  40   1      
  41   1      }
  42          static void speaker_status_resp(void) {
  43   1              if (g_tWork.status.bits.speaker) {
  44   2                      LCD_ShowString(" BAZOOKA");
  45   2              } else {
  46   2                      LCD_ShowString(" PWR OFF");
  47   2              }
  48   1      }
  49          static void relay_status_resp(void) {
  50   1              if (g_tWork.status.bits.relay) {
  51   2                      LCD_ShowString("RELAY ON");
  52   2              } else {
  53   2                      LCD_ShowString("RELAYOFF");
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 2   

  54   2              }
  55   1      
  56   1      }
  57          static void vol_resp(void) {
  58   1              char str[16] = { 0 };
  59   1      
  60   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  61   1              LCD_ShowString(str);
  62   1      }
  63          
  64          static void clear_lcd_resp(void) {
  65   1              LCD_ShowString("        ");
  66   1      
  67   1              LCD_Clear_upColon_ICO();
  68   1              LCD_Clear_downColon_ICO();
  69   1      }
  70          static void BT_pause_show_lcd_resp(void) {
  71   1              LCD_ShowString("   PAUSE");
  72   1      }
  73          
  74          static void BT_play_show_lcd_resp(void) {
  75   1              LCD_ShowString("    PLAY");
  76   1      }
  77          static void FM_scanning_show_lcd_resp(void) {
  78   1              LCD_ShowString("SCANNING");
  79   1              LCD_Clear_upColon_ICO();
  80   1              LCD_Clear_downColon_ICO();
  81   1              LCD_Clear_MHZ_ICO();
  82   1      }
  83          #if 0
              static void FM_ok_show_lcd_resp(void) {
                      LCD_ShowString("FM 1027 ");
                      LCD_Clear_upColon_ICO();
                      LCD_Show_downColon_ICO();
                      LCD_Show_MHZ_ICO();
              }
              #endif
  91          static void AUX_mute_show_lcd_resp(void) {
  92   1              LCD_ShowString("   MUTE ");
  93   1      }
  94          
  95          static void AUX_play_show_lcd_resp(void) {
  96   1              LCD_ShowString("    PLAY");
  97   1      
  98   1      }
  99          static void USB_pause_show_lcd_resp(void) {
 100   1              LCD_ShowString("   PAUSE");
 101   1              LCD_Clear_upColon_ICO();
 102   1              LCD_Clear_downColon_ICO();
 103   1      }
 104          #if 0
              static void USB_time_show_lcd_resp(void) {
                      LCD_ShowString("     349");
                      LCD_Show_upColon_ICO();
                      LCD_Show_downColon_ICO();
              }
              #endif
 111          static void BT_next_show_lcd_resp(void) {
 112   1              LCD_ShowString("   NEXT ");
 113   1              LCD_Clear_upColon_ICO();
 114   1              LCD_Clear_downColon_ICO();
 115   1      }
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 3   

 116          static void BT_prev_show_lcd_resp(void) {
 117   1              LCD_ShowString("   PREV ");
 118   1              LCD_Clear_upColon_ICO();
 119   1              LCD_Clear_downColon_ICO();
 120   1      }
 121          static void FM_station_show_lcd_resp(void) {
 122   1              sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 123   1              LCD_ShowString(tmpBuf);
 124   1              LCD_Clear_upColon_ICO();
 125   1              LCD_Show_downColon_ICO();
 126   1      }
 127          static void USB_track_show_lcd_resp(void) {
 128   1              sprintf(tmpBuf, "TR %u", g_tWork.track);
 129   1              LCD_ShowString(tmpBuf);
 130   1              LCD_Clear_upColon_ICO();
 131   1              LCD_Clear_downColon_ICO();
 132   1      }
 133          static void LED_show_blink_name_show_lcd_resp(void) {
 134   1      //      sprintf(tmpBuf, "TR %u", g_tWork.track);
 135   1              LCD_ShowString(tmpBuf);
 136   1      //      LCD_ShowString("PAUSE");
 137   1              LCD_Clear_upColon_ICO();
 138   1              LCD_Clear_downColon_ICO();
 139   1      }
 140          static void LED_clear_blink_name_show_lcd_resp(void) {
 141   1              //      sprintf(tmpBuf, "TR %u", g_tWork.track);
 142   1              LCD_ShowString("        ");
 143   1              LCD_Clear_upColon_ICO();
 144   1              LCD_Clear_downColon_ICO();
 145   1      }
 146          static void app_2d4_Rcv(uint8_t *buf) {
 147   1              uint8_t i = 0;
 148   1              uint8_t index = 0;
 149   1              uint8_t check = 0;
 150   1      
 151   1              if (buf[0] != LAMP2LCD_HEADER) {
 152   2                      return;
 153   2              }
 154   1              key_bright_toggle();
 155   1              if (buf[1] > PAYLOAD_WIDTH) {
 156   2                      return;
 157   2              }
 158   1              for (i = 0; i < (buf[1] + 1); i++) {
 159   2                      check += buf[i + 1];
 160   2              }
 161   1              if (check != buf[buf[1] + 2]) {
 162   2                      return;
 163   2              }
 164   1      
 165   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
 166   1              index = 0;
 167   1              switch (buf[2]) {
 168   2              case POWER_SHORT_CMD:
 169   2      
 170   2                      break;
 171   2              case POWER_LONG_CMD:
 172   2      
 173   2                      if (buf[3]) {
 174   3                              g_tWork.status.bits.speaker = 1;
 175   3                              Repeat_SetStart(speaker_status_resp);
 176   3                              Repeat_SetStop(0);
 177   3      
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 4   

 178   3                              Repeat_Start(20, 1, 1);
 179   3                      } else {
 180   3                              g_tWork.status.bits.speaker = 0;
 181   3                              Repeat_SetStart(speaker_status_resp);
 182   3                              Repeat_SetStop(0);
 183   3      
 184   3                              Repeat_Start(20, 1, 0);
 185   3                      }
 186   2      
 187   2                      break;
 188   2              case ACC_CMD:
 189   2      
 190   2                      if (buf[3] == 1) {
 191   3                              g_tWork.status.bits.relay = 1;
 192   3                      } else {
 193   3                              g_tWork.status.bits.relay = 0;
 194   3                      }
 195   2                      Repeat_SetStart(relay_status_resp);
 196   2                      Repeat_SetStop(0);
 197   2                      Repeat_Start(20, 1, 1);
 198   2      
 199   2                      break;
 200   2              case UP_CMD:
 201   2                      switch (buf[3]) {
 202   3                      case 0x01:  //BT
 203   3                              Repeat_SetStart(BT_prev_show_lcd_resp);
 204   3                              Repeat_SetStop(0);
 205   3                              Repeat_Start(20, 1, 1);
 206   3      
 207   3                              break;
 208   3                      case 0x02:  //FM
 209   3                              g_tWork.FM_station = buf[4];
 210   3                              Repeat_SetStart(FM_station_show_lcd_resp);
 211   3                              Repeat_SetStop(0);
 212   3                              Repeat_Start(20, 1, 1);
 213   3      
 214   3                              break;
 215   3                      case 0x04:  //USB
 216   3                              g_tWork.track = buf[4];
 217   3                              g_tWork.track |= (buf[5] << 8);
 218   3                              Repeat_SetStart(USB_track_show_lcd_resp);
 219   3                              Repeat_SetStop(0);
 220   3                              Repeat_Start(20, 1, 1);
 221   3                              break;
 222   3                      case 0x05:  //LED
 223   3      
 224   3                              app_lcd_default_string_set(buf + 4, 8);
 225   3      
 226   3                              break;
 227   3                      default:
 228   3                              break;
 229   3                      }
 230   2                      break;
 231   2              case DOWN_CMD:
 232   2      
 233   2                      switch (buf[3]) {
 234   3                      case 0x01:  //BT
 235   3                              Repeat_SetStart(BT_next_show_lcd_resp);
 236   3                              Repeat_SetStop(0);
 237   3                              Repeat_Start(20, 1, 1);
 238   3      
 239   3                              break;
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 5   

 240   3                      case 0x02:  //FM
 241   3                              g_tWork.FM_station = buf[4];
 242   3                              Repeat_SetStart(FM_station_show_lcd_resp);
 243   3                              Repeat_SetStop(0);
 244   3                              Repeat_Start(20, 1, 1);
 245   3                              break;
 246   3                      case 0x04:  //USB
 247   3                              g_tWork.track = buf[4];
 248   3                              g_tWork.track |= (buf[5] << 8);
 249   3                              Repeat_SetStart(USB_track_show_lcd_resp);
 250   3                              Repeat_SetStop(0);
 251   3                              Repeat_Start(20, 1, 1);
 252   3                              break;
 253   3                      case 0x05:  //LED
 254   3                              app_lcd_default_string_set(buf + 4, 8);
 255   3                              break;
 256   3                      default:
 257   3                              break;
 258   3                      }
 259   2      
 260   2                      break;
 261   2              case DOME_CMD:
 262   2                      if (1 == buf[3]) {  //dome mode
 263   3                              if (1 == buf[4]) { //pause
 264   4                                      memcpy(tmpBuf, buf + 5, 8);
 265   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 266   4                                      Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 267   4                                      Repeat_Start(8, 8, 0);
 268   4                              } else {
 269   4                                      app_lcd_default_string_set(buf + 5, 8);
 270   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 271   4                                      Repeat_SetStop(0);
 272   4                                      Repeat_Start(1, 1, 1);
 273   4                              }
 274   3                      } else {
 275   3      //                      app_lcd_default_string_set(buf + 6, 8);
 276   3                              Repeat_SetStart(0);
 277   3                              Repeat_SetStop(0);
 278   3                              Repeat_Start(1, 1, 1);
 279   3                      }
 280   2      
 281   2                      break;
 282   2              case VOL_ADD_CMD:
 283   2                      g_tWork.vol = buf[3];
 284   2      
 285   2                      Repeat_SetStart(vol_resp);
 286   2                      Repeat_SetStop(0);
 287   2      
 288   2                      Repeat_Start(20, 1, 1);
 289   2                      break;
 290   2              case VOL_MINUS_CMD:
 291   2                      g_tWork.vol = buf[3];
 292   2      
 293   2                      Repeat_SetStart(vol_resp);
 294   2                      Repeat_SetStop(0);
 295   2      
 296   2                      Repeat_Start(20, 1, 1);
 297   2                      break;
 298   2              case PLAY_CMD:
 299   2                      switch (buf[3]) {
 300   3                      case 0x01:  //BT
 301   3                              if (1 == buf[4]) {
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 6   

 302   4                                      Repeat_SetStart(BT_play_show_lcd_resp);
 303   4                                      Repeat_SetStop(0);
 304   4                                      Repeat_Start(20, 1, 1);
 305   4                              } else if (2 == buf[4]) {
 306   4                                      Repeat_SetStart(BT_pause_show_lcd_resp);
 307   4                                      Repeat_SetStop(clear_lcd_resp);
 308   4                                      Repeat_Start(10, 10, 0);
 309   4                              }
 310   3                              break;
 311   3                      case 0x02:  //FM
 312   3                              if (2 == buf[4]) {
 313   4                                      Repeat_SetStart(FM_scanning_show_lcd_resp);
 314   4                                      Repeat_SetStop(0);
 315   4                                      Repeat_Start(20, 1, 0);
 316   4                              } else if (1 == buf[4]) {
 317   4      //                              Repeat_SetStart(FM_ok_show_lcd_resp);
 318   4      //                              Repeat_SetStop(0);
 319   4      //                              Repeat_Start(10, 1, 1);
 320   4                              }
 321   3                              break;
 322   3                      case 0x03:  //AUX
 323   3                              if (1 == buf[4]) {
 324   4                                      Repeat_SetStart(AUX_play_show_lcd_resp);
 325   4                                      Repeat_SetStop(clear_lcd_resp);
 326   4                                      Repeat_Start(10, 10, 0);
 327   4                              } else if (2 == buf[4]) {
 328   4                                      Repeat_SetStart(AUX_mute_show_lcd_resp);
 329   4                                      Repeat_SetStop(clear_lcd_resp);
 330   4                                      Repeat_Start(10, 10, 0);
 331   4                              }
 332   3                              break;
 333   3                      case 0x04:  //USB
 334   3                              if (1 == buf[4]) {
 335   4      //                              Repeat_SetStart(USB_time_show_lcd_resp);
 336   4      //                              Repeat_SetStop(0);
 337   4      //                              Repeat_Start(10, 1, 1);
 338   4                              } else if (2 == buf[4]) {
 339   4                                      Repeat_SetStart(USB_pause_show_lcd_resp);
 340   4                                      Repeat_SetStop(clear_lcd_resp);
 341   4                                      Repeat_Start(10, 10, 0);
 342   4                              }
 343   3                              break;
 344   3                      case 0x05:  //LED
 345   3      
 346   3                              if (1 == buf[4]) { //pause
 347   4                                      memcpy(tmpBuf, buf + 5, 8);
 348   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 349   4                                      Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 350   4                                      Repeat_Start(8, 8, 0);
 351   4      
 352   4                              } else {
 353   4                                      app_lcd_default_string_set(buf + 5, 8);
 354   4                                      Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 355   4                                      Repeat_SetStop(0);
 356   4                                      Repeat_Start(1, 1, 1);
 357   4                              }
 358   3                              break;
 359   3                      }
 360   2                      break;
 361   2              case MODE_CMD:
 362   2                      LCD_Clear_MHZ_ICO();
 363   2                      LCD_Clear_upColon_ICO();
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 7   

 364   2                      LCD_Clear_downColon_ICO();
 365   2                      LCD_Clear_BLUETooTH_ICO();
 366   2                      LCD_Clear_FM_ICO();
 367   2                      LCD_Clear_AUX_ICO();
 368   2                      LCD_Clear_USB_ICO();
 369   2      
 370   2                      switch (buf[3]) {
 371   3                      case 0x01:  //BT
 372   3      
 373   3                              LCD_Show_BLUETooTH_ICO();
 374   3                              if (1 == buf[4]) {
 375   4                                      strcpy(tmpBuf, "PRIRED");
 376   4                              } else if (2 == buf[4]) {
 377   4                                      strcpy(tmpBuf, "PAIRING");
 378   4                              }
 379   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 380   3                              break;
 381   3                      case 0x02:  //FM
 382   3                              LCD_Show_FM_ICO();
 383   3                              LCD_Show_MHZ_ICO();
 384   3                              LCD_Clear_downColon_ICO();
 385   3      
 386   3                              if (buf[4] > 99) {
 387   4                                      sprintf(tmpBuf, "FM %u%u", buf[4], buf[5]);
 388   4                              } else if (buf[4] > 9) {
 389   4                                      sprintf(tmpBuf, "FM  %u%u", buf[4], buf[5]);
 390   4                              } else {
 391   4                                      sprintf(tmpBuf, "FM   %u%u", buf[4], buf[5]);
 392   4                              }
 393   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 394   3      
 395   3                              break;
 396   3                      case 0x03:  //AUX
 397   3                              LCD_Show_AUX_ICO();
 398   3                              if (1 == buf[4]) {
 399   4                                      strcpy(tmpBuf, "PLAY");
 400   4                              } else if (2 == buf[4]) {
 401   4                                      strcpy(tmpBuf, "MUTE");
 402   4                              }
 403   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 404   3      
 405   3                              break;
 406   3                      case 0x04:  //USB
 407   3                      {
 408   4                              uint16_t time = 0;
 409   4                              time = buf[4];
 410   4                              time <<= 8;
 411   4                              time |= buf[5];
 412   4                              LCD_Show_USB_ICO();
 413   4      
 414   4                              if ((time / 60) > 99) {
 415   5                                      sprintf(tmpBuf, "   %u%02u", time / 60, time % 60);
 416   5                              } else if ((time / 60) > 9) {
 417   5                                      sprintf(tmpBuf, "    %u%02u", time / 60, time % 60);
 418   5                              } else {
 419   5                                      sprintf(tmpBuf, "     %u%02u", time / 60, time % 60);
 420   5                              }
 421   4                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 422   4                      }
 423   3                              break;
 424   3                      }
 425   2                      break;
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 8   

 426   2              }
 427   1              if (index) {
 428   2                      index++;
 429   2      //      app_2d4_send(buf, index);
 430   2              }
 431   1      
 432   1      }
 433          
 434          void app_2d4_pro(void) {
 435   1              if (sendRcv_flag) {
 436   2      
 437   2                      switch (ucRF_GetStatus()) {
 438   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 439   3      
 440   3                              RF_ClearFIFO();
 441   3                              RF_ClearStatus();
 442   3      
 443   3                              sendRcv_flag = 0;
 444   3                              RF_RxMode();
 445   3      
 446   3      //                      key_bright_toggle();
 447   3      
 448   3                              break;
 449   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 450   3      
 451   3                              RF_ClearFIFO();
 452   3                              RF_ClearStatus();
 453   3                              break;
 454   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 455   3      
 456   3                              RF_ClearFIFO();
 457   3                              RF_ClearStatus();
 458   3                              break;
 459   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 460   3      
 461   3                              RF_TxData(sendBuf, PAYLOAD_WIDTH);
 462   3      
 463   3                              break;
 464   3                      }
 465   2      
 466   2              } else {
 467   2                      if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 468   3      
 469   3                              app_2d4_Rcv(rcvBuf);
 470   3                      }
 471   2      
 472   2              }
 473   1      
 474   1      }
 475          #if 0
              void app_2d4_1S_pro(void) {
              
                      switch (g_tWork.mode) {
                              case 'B':
              
                              app_lcd_default_string_set(" PAIRING", 8);
                              LCD_Clear_MHZ_ICO();
              
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
              
                              break;
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/12/2017 00:43:57 PAGE 9   

                              case 'F':
                              app_lcd_default_string_set("FM  821 ", 8);
                              LCD_Clear_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Show_MHZ_ICO();
                              break;
                              case 'A':
                              app_lcd_default_string_set("    PLAY", 8);
                              LCD_Clear_MHZ_ICO();
                              LCD_Clear_upColon_ICO();
                              LCD_Clear_downColon_ICO();
                              break;
                              case 'U':
                              app_lcd_default_string_set("     349", 8);
                              LCD_Show_upColon_ICO();
                              LCD_Show_downColon_ICO();
              
                              LCD_Clear_MHZ_ICO();
                              break;
                      }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2412    ----
   CONSTANT SIZE    =    223    ----
   XDATA SIZE       =     16      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
