C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) TABS(
                    -2) OBJECT(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          #define BT_MODE     0x01
  11          #define FM_MODE     0x02
  12          #define USB_MODE    0x03
  13          #define AUX_MODE    0x04
  14          #define DOME_MODE   0x05
  15          #define CALL_MODE   0x06
  16          
  17          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  18          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  19          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  20          
  21          static char tmpBuf[16] = { 0 };
  22          
  23          void app_2d4_init(void) {
  24   1      
  25   1        sendRcv_flag = 0;
  26   1        memset(rcvBuf, 0, PAYLOAD_WIDTH);
  27   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  28   1      
  29   1        RF_Init();
  30   1        RF_RxMode();
  31   1      
  32   1      //  RF_Carrier(1);
  33   1      }
  34          
  35          void app_2d4_send(uint8_t *d, uint8_t len) {
  36   1      
  37   1        if (len > PAYLOAD_WIDTH) {
  38   2          return;
  39   2        }
  40   1      
  41   1        RF_TxMode();
  42   1        sendRcv_flag = 1;
  43   1      
  44   1        if (sendBuf != d) {
  45   2          memcpy(sendBuf, d, len);
  46   2        }
  47   1      
  48   1      }
  49          static void speaker_status_resp(void) {
  50   1        if (g_tWork.status.bits.speaker) {
  51   2          LCD_ShowString(" BAZOOKA");
  52   2        } else {
  53   2          LCD_ShowString(" PWR OFF");
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 2   

  54   2        }
  55   1      }
  56          static void relay_status_resp(void) {
  57   1        if (g_tWork.status.bits.relay) {
  58   2          LCD_ShowString("ACC ON");
  59   2        } else {
  60   2          LCD_ShowString("ACC OFF");
  61   2        }
  62   1      
  63   1      }
  64          static void vol_resp(void) {
  65   1        char str[16] = { 0 };
  66   1      
  67   1      //  LCD_Clear_MHZ_ICO();
  68   1        LCD_Clear_upColon_ICO();
  69   1        LCD_Clear_downColon_ICO();
  70   1      
  71   1        sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  72   1        LCD_ShowString(str);
  73   1      }
  74          
  75          static void clear_lcd_resp(void) {
  76   1        LCD_ShowString("        ");
  77   1      
  78   1        LCD_Clear_upColon_ICO();
  79   1        LCD_Clear_downColon_ICO();
  80   1      }
  81          static void BT_pause_show_lcd_resp(void) {
  82   1        LCD_ShowString("   PAUSE");
  83   1      }
  84          #if 0
              static void BT_play_show_lcd_resp(void) {
                LCD_ShowString("    PLAY");
              }
              static void FM_scanning_show_lcd_resp(void) {
                LCD_ShowString("SCANNING");
                LCD_Clear_upColon_ICO();
                LCD_Clear_downColon_ICO();
                LCD_Clear_MHZ_ICO();
              }
              
              static void FM_ok_show_lcd_resp(void) {
                LCD_ShowString("FM 1027 ");
                LCD_Clear_upColon_ICO();
                LCD_Show_downColon_ICO();
                LCD_Show_MHZ_ICO();
              }
              #endif
 102          static void AUX_mute_show_lcd_resp(void) {
 103   1        LCD_ShowString("   MUTE ");
 104   1      }
 105          
 106          static void USB_pause_show_lcd_resp(void) {
 107   1        LCD_ShowString("   PAUSE");
 108   1        LCD_Clear_upColon_ICO();
 109   1        LCD_Clear_downColon_ICO();
 110   1      }
 111          #if 0
              static void USB_time_show_lcd_resp(void) {
                LCD_ShowString("     349");
                LCD_Show_upColon_ICO();
                LCD_Show_downColon_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 3   

              }
              #endif
 118          static void BT_next_show_lcd_resp(void) {
 119   1        LCD_ShowString("   NEXT ");
 120   1        LCD_Clear_upColon_ICO();
 121   1        LCD_Clear_downColon_ICO();
 122   1      }
 123          static void BT_prev_show_lcd_resp(void) {
 124   1        LCD_ShowString("   PREV ");
 125   1        LCD_Clear_upColon_ICO();
 126   1        LCD_Clear_downColon_ICO();
 127   1      }
 128          static void FM_station_show_lcd_resp(void) {
 129   1        sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 130   1        LCD_ShowString(tmpBuf);
 131   1        LCD_Clear_MHZ_ICO();
 132   1        LCD_Clear_upColon_ICO();
 133   1        LCD_Show_downColon_ICO();
 134   1      }
 135          static void USB_track_show_lcd_resp(void) {
 136   1        sprintf(tmpBuf, "TR %u", g_tWork.track);
 137   1        LCD_ShowString(tmpBuf);
 138   1        LCD_Clear_upColon_ICO();
 139   1        LCD_Clear_downColon_ICO();
 140   1      }
 141          static void LED_show_blink_name_show_lcd_resp(void) {
 142   1      //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 143   1        LCD_ShowString(tmpBuf);
 144   1      //  LCD_ShowString("PAUSE");
 145   1        LCD_Clear_upColon_ICO();
 146   1        LCD_Clear_downColon_ICO();
 147   1      }
 148          static void LED_clear_blink_name_show_lcd_resp(void) {
 149   1        //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 150   1        LCD_ShowString("        ");
 151   1        LCD_Clear_upColon_ICO();
 152   1        LCD_Clear_downColon_ICO();
 153   1      }
 154          
 155          //static char testbuf[16] = { 0 };
 156          
 157          static void app_2d4_Rcv(uint8_t *buf) {
 158   1        uint8_t i = 0;
 159   1        uint8_t index = 0;
 160   1        uint8_t check = 0;
 161   1      
 162   1        if (buf[0] != LAMP2LCD_HEADER) {
 163   2          return;
 164   2        }
 165   1      //  key_bright_toggle();
 166   1        if (buf[1] > PAYLOAD_WIDTH) {
 167   2          return;
 168   2        }
 169   1        for (i = 0; i < (buf[1] + 1); i++) {
 170   2          check += buf[i + 1];
 171   2        }
 172   1        if (check != buf[buf[1] + 2]) {
 173   2          return;
 174   2        }
 175   1      
 176   1      //    memset(testbuf, 0, 16);
 177   1      //  sprintf(testbuf, "R%02X", (uint16_t)buf[2]);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 4   

 178   1      //  app_lcd_default_string_set(testbuf, strlen(testbuf));
 179   1      
 180   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
 181   1        index = 0;
 182   1        app_work_cnt_clear();
 183   1      //  switch (0) {
 184   1        switch (buf[2]) {
 185   2        case DEVICE_HEART_CMD:
 186   2          app_work_cnt_clear();
 187   2          break;
 188   2        case RCV_POWER_STATUS_CMD:
 189   2          Repeat_Stop();
 190   2      
 191   2          LCD_Clear_downColon_ICO();
 192   2          LCD_Clear_upColon_ICO();
 193   2      
 194   2          LCD_Clear_MHZ_ICO();
 195   2          LCD_Clear_FM_ICO();
 196   2          LCD_Clear_USB_ICO();
 197   2          LCD_Clear_AUX_ICO();
 198   2          LCD_Clear_BLUETooTH_ICO();
 199   2      
 200   2          if (buf[3] == 0x01) {
 201   3            g_tWork.status.bits.speaker = 1;
 202   3            Repeat_SetStart(speaker_status_resp);
 203   3            Repeat_SetStop(0);
 204   3            Repeat_Start(50, 1, 1);
 205   3          } else if (buf[3] == 0x02) {
 206   3            g_tWork.status.bits.speaker = 0;
 207   3            Repeat_SetStart(speaker_status_resp);
 208   3            Repeat_SetStop(0);
 209   3            Repeat_Start(20, 1, 0);
 210   3          }
 211   2          break;
 212   2        case RCV_X_BOX_STATUS_CMD:
 213   2      //    switch (buf[3]) {
 214   2      //    case BT_MODE:
 215   2      //
 216   2      //      break;
 217   2      //    case FM_MODE:
 218   2      //
 219   2      //      break;
 220   2      //    case AUX_MODE:  //AUX
 221   2      //
 222   2      //      break;
 223   2      //    case USB_MODE:  //USB
 224   2      //
 225   2      //      break;
 226   2      //    case DOME_MODE:  //LED
 227   2      //
 228   2      //      break;
 229   2      //    case CALL_MODE:
 230   2      //      break;
 231   2      //    }
 232   2      
 233   2          break;
 234   2        case RCV_BT_STATUS_CMD:
 235   2          switch (buf[3]) {
 236   3          case BT_MODE:
 237   3      //      Repeat_Stop();
 238   3            if (g_tWork.mode != BT_MODE) {
 239   4              Repeat_Stop();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 5   

 240   4              g_tWork.mode = BT_MODE;
 241   4            }
 242   3            LCD_Clear_MHZ_ICO();
 243   3            LCD_Clear_FM_ICO();
 244   3            LCD_Clear_USB_ICO();
 245   3            LCD_Clear_AUX_ICO();
 246   3      
 247   3            LCD_Show_BLUETooTH_ICO();
 248   3            if (buf[4] == 0x01) {
 249   4              sprintf(tmpBuf, " PAIRING");
 250   4            } else if (buf[4] == 0x02) {
 251   4              sprintf(tmpBuf, "  PAIRED");
 252   4            } else if (buf[4] == 0x03) {
 253   4              sprintf(tmpBuf, "TWS SCAN");
 254   4            } else if (buf[4] == 0x04) {
 255   4              sprintf(tmpBuf, "  TWS OK");
 256   4            }
 257   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 258   3            break;
 259   3          case FM_MODE:
 260   3            if (buf[4] == 0x01) {
 261   4      
 262   4            } else if (buf[4] == 0x02) {
 263   4      
 264   4            } else if (buf[4] == 0x03) {
 265   4      
 266   4            } else if (buf[4] == 0x04) {
 267   4      
 268   4            }
 269   3      
 270   3            Repeat_Stop();
 271   3            LCD_Clear_All();
 272   3      
 273   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 274   3                (uint16_t) buf[4]);
 275   3      
 276   3      //      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 277   3      
 278   3            break;
 279   3          case AUX_MODE:  //AUX
 280   3      
 281   3            break;
 282   3          case USB_MODE:  //USB
 283   3      
 284   3            break;
 285   3          case DOME_MODE:  //LED
 286   3      
 287   3            break;
 288   3          case CALL_MODE:
 289   3            break;
 290   3          }
 291   2          break;
 292   2        case RCV_PLAY_PAUSE_STATUS_CMD:
 293   2          switch (buf[3]) {
 294   3          case BT_MODE:
 295   3            if (1 == buf[4]) {
 296   4              Repeat_Stop();
 297   4      
 298   4      //        Repeat_SetStart(BT_play_show_lcd_resp);
 299   4      //        Repeat_SetStop(0);
 300   4      //        Repeat_Start(20, 1, 1);
 301   4      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 6   

 302   4            } else if (2 == buf[4]) {
 303   4              Repeat_SetStart(BT_pause_show_lcd_resp);
 304   4              Repeat_SetStop(clear_lcd_resp);
 305   4              Repeat_Start(6, 6, 0);
 306   4            }
 307   3            break;
 308   3          case FM_MODE:
 309   3            if (2 == buf[4]) {
 310   4              sprintf(tmpBuf, "SCANNING");
 311   4              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 312   4            } else if (1 == buf[4]) {
 313   4              //        Repeat_SetStart(FM_ok_show_lcd_resp);
 314   4              //        Repeat_SetStop(0);
 315   4              //        Repeat_Start(10, 1, 1);
 316   4            }
 317   3            break;
 318   3          case AUX_MODE:  //AUX
 319   3          {
 320   4            static BIT aux_pause_lock = 0;
 321   4            LCD_Clear_downColon_ICO();
 322   4            LCD_Clear_upColon_ICO();
 323   4      
 324   4            LCD_Clear_MHZ_ICO();
 325   4            LCD_Clear_FM_ICO();
 326   4            LCD_Clear_USB_ICO();
 327   4            LCD_Clear_AUX_ICO();
 328   4            LCD_Clear_BLUETooTH_ICO();
 329   4      
 330   4            LCD_Show_AUX_ICO();
 331   4            if (1 == buf[4]) {
 332   5              if (aux_pause_lock) {
 333   6                Repeat_Stop();
 334   6                aux_pause_lock = 0;
 335   6              }
 336   5              sprintf(tmpBuf, "    PLAY");
 337   5              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 338   5            } else if (2 == buf[4]) {
 339   5              aux_pause_lock = 1;
 340   5              Repeat_SetStart(AUX_mute_show_lcd_resp);
 341   5              Repeat_SetStop(clear_lcd_resp);
 342   5              Repeat_Start(7, 7, 0);
 343   5            }
 344   4          }
 345   3            break;
 346   3          case USB_MODE:  //USB
 347   3            if (1 == buf[4]) {
 348   4              Repeat_Stop();
 349   4              //        Repeat_SetStart(USB_time_show_lcd_resp);
 350   4              //        Repeat_SetStop(0);
 351   4              //        Repeat_Start(10, 1, 1);
 352   4            } else if (2 == buf[4]) {
 353   4              Repeat_SetStart(USB_pause_show_lcd_resp);
 354   4              Repeat_SetStop(clear_lcd_resp);
 355   4              Repeat_Start(10, 10, 0);
 356   4            }
 357   3            break;
 358   3          case DOME_MODE:  //LED
 359   3            if (1 == buf[4]) { //pause
 360   4              memcpy(tmpBuf, buf + 5, 8);
 361   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 362   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 363   4              Repeat_Start(6, 6, 0);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 7   

 364   4      
 365   4            } else {
 366   4              app_lcd_default_string_set(buf + 5, 8, 0);
 367   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 368   4      //        Repeat_SetStop(0);
 369   4      //        Repeat_Start(1, 1, 1);
 370   4            }
 371   3            break;
 372   3          case CALL_MODE:
 373   3            break;
 374   3          }
 375   2      
 376   2          break;
 377   2        case RCV_PREV_NEXT_CMD:
 378   2          switch (buf[3]) {
 379   3          case BT_MODE:  //BT
 380   3            if (buf[4] == 1) { //up
 381   4              Repeat_SetStart(BT_prev_show_lcd_resp);
 382   4              Repeat_SetStop(0);
 383   4              Repeat_Start(30, 1, 1);
 384   4            } else if (buf[4] == 2) { //down
 385   4              Repeat_SetStart(BT_next_show_lcd_resp);
 386   4              Repeat_SetStop(0);
 387   4              Repeat_Start(30, 1, 1);
 388   4            }
 389   3            break;
 390   3          case FM_MODE:  //FM
 391   3            Repeat_Stop();
 392   3            g_tWork.FM_station = buf[5];
 393   3            Repeat_SetStart(FM_station_show_lcd_resp);
 394   3            Repeat_SetStop(0);
 395   3            Repeat_Start(30, 1, 1);
 396   3            break;
 397   3          case AUX_MODE:  //AUX
 398   3            break;
 399   3          case USB_MODE:  //USB
 400   3            g_tWork.track = buf[6];
 401   3            g_tWork.track |= (buf[5] << 8);
 402   3            Repeat_SetStart(USB_track_show_lcd_resp);
 403   3            Repeat_SetStop(0);
 404   3            Repeat_Start(30, 1, 1);
 405   3      
 406   3            break;
 407   3          case DOME_MODE:  //LED
 408   3            app_lcd_default_string_set(buf + 4, 8, 0);
 409   3            break;
 410   3          case CALL_MODE:
 411   3            break;
 412   3          default:
 413   3            break;
 414   3          }
 415   2          break;
 416   2        case RCV_USB_PLAY_TIME_CMD:
 417   2          if (g_tWork.mode != USB_MODE) {
 418   3            Repeat_Stop();
 419   3            g_tWork.mode = USB_MODE;
 420   3          }
 421   2          LCD_Clear_MHZ_ICO();
 422   2          LCD_Clear_FM_ICO();
 423   2          LCD_Clear_BLUETooTH_ICO();
 424   2          LCD_Clear_AUX_ICO();
 425   2      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 8   

 426   2          LCD_Show_USB_ICO();
 427   2          if (buf[3] > 9) {
 428   3            sprintf(tmpBuf, "    %u%02u", (uint16_t) buf[3], (uint16_t) buf[4]);
 429   3          } else {
 430   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 431   3                (uint16_t) buf[4]);
 432   3          }
 433   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 3);
 434   2          break;
 435   2        case RCV_FM_HZ_CMD:
 436   2          if (g_tWork.mode != FM_MODE) {
 437   3            Repeat_Stop();
 438   3            g_tWork.mode = FM_MODE;
 439   3          }
 440   2      
 441   2          LCD_Clear_USB_ICO();
 442   2          LCD_Clear_MHZ_ICO();
 443   2          LCD_Clear_BLUETooTH_ICO();
 444   2          LCD_Clear_AUX_ICO();
 445   2      
 446   2          LCD_Show_FM_ICO();
 447   2          LCD_Show_MHZ_ICO();
 448   2      
 449   2          if (buf[3] > 99) {
 450   3            sprintf(tmpBuf, "FM %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 451   3          } else if (buf[3] > 9) {
 452   3            sprintf(tmpBuf, "FM  %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 453   3          } else {
 454   3            sprintf(tmpBuf, "FM   %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 455   3          }
 456   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 1);
 457   2          break;
 458   2        case RCV_VOL_CMD:
 459   2          g_tWork.vol = buf[3] & 0x7F;
 460   2          Repeat_SetStart(vol_resp);
 461   2          Repeat_SetStop(0);
 462   2          Repeat_Start(30, 1, 1);
 463   2          break;
 464   2      ////
 465   2        case KEY_POWER_SHORT_CMD:
 466   2          if (1 == buf[3]) { //pause
 467   3            memcpy(tmpBuf, buf + 4, 8);
 468   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 469   3            Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 470   3            Repeat_Start(6, 6, 0);
 471   3          } else {
 472   3            app_lcd_default_string_set(buf + 4, 8, 0);
 473   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 474   3            Repeat_SetStop(0);
 475   3            Repeat_Start(1, 1, 1);
 476   3          }
 477   2          break;
 478   2        case KEY_ACC_CMD:
 479   2          LCD_Clear_downColon_ICO();
 480   2          LCD_Clear_upColon_ICO();
 481   2          if (buf[3] == 1) {
 482   3            g_tWork.status.bits.relay = 1;
 483   3          } else {
 484   3            g_tWork.status.bits.relay = 0;
 485   3          }
 486   2          Repeat_SetStart(relay_status_resp);
 487   2          Repeat_SetStop(0);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 9   

 488   2          Repeat_Start(20, 1, 1);
 489   2          break;
 490   2        case KEY_DOME_CMD:
 491   2      #if 0
                  sendBuf[index++] = LAMP2LCD_HEADER;
                  sendBuf[index++] = 11;
                  sendBuf[index++] = KEY_DOME_CMD;
                  sendBuf[index++] = g_tWork.status.bits.DOME;
                  sendBuf[index++] = g_tWork.status.bits.pause;
                  app_dome_get_current_Name(sendBuf + index, 8);
                  index += 8;
                  for (i = 0; i < (sendBuf[1] + 1); i++) {
                    sendBuf[index] += sendBuf[i + 1];
                  }
              #endif
 503   2          if (buf[3] == 1) {
 504   3            LCD_Show_LED_ICO();
 505   3            if (1 == buf[4]) { //pause
 506   4              memcpy(tmpBuf, buf + 5, 8);
 507   4              for (i = 0; i < sizeof(tmpBuf); i++) {
 508   5                if (*(tmpBuf + i) == 0) {
 509   6                  *(tmpBuf + i) = ' ';
 510   6                }
 511   5              }
 512   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 513   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 514   4              Repeat_Start(5, 5, 0);
 515   4            } else {
 516   4      //        memcpy(tmpBuf, buf + 5, 8);
 517   4              app_lcd_default_string_set(buf + 5, 8, 0);
 518   4      
 519   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 520   4      //        Repeat_SetStop(0);
 521   4      //        Repeat_Start(1, 1, 1);
 522   4            }
 523   3          } else {
 524   3            LCD_Clear_LED_ICO();
 525   3          }
 526   2          break;
 527   2        case KEY_UP_CMD:
 528   2          memcpy(tmpBuf, buf + 3, 8);
 529   2          app_lcd_default_string_set(buf + 3, 8, 0);
 530   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 531   2          Repeat_SetStop(0);
 532   2          Repeat_Start(1, 1, 1);
 533   2          break;
 534   2        case KEY_DOWN_CMD:
 535   2          memcpy(tmpBuf, buf + 3, 8);
 536   2          app_lcd_default_string_set(buf + 3, 8, 0);
 537   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 538   2          Repeat_SetStop(0);
 539   2          Repeat_Start(1, 1, 1);
 540   2          break;
 541   2        case MODE_CHANGE_CMD:
 542   2          LCD_Clear_MHZ_ICO();
 543   2          LCD_Clear_upColon_ICO();
 544   2          LCD_Clear_downColon_ICO();
 545   2          LCD_Clear_BLUETooTH_ICO();
 546   2          LCD_Clear_FM_ICO();
 547   2          LCD_Clear_AUX_ICO();
 548   2          LCD_Clear_USB_ICO();
 549   2      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 10  

 550   2          switch (buf[3]) {
 551   3          case BT_MODE:  //BT
 552   3            LCD_Show_BLUETooTH_ICO();
 553   3            if (1 == buf[4]) {
 554   4              strcpy(tmpBuf, "PRIRED");
 555   4            } else if (2 == buf[4]) {
 556   4              strcpy(tmpBuf, "PAIRING");
 557   4            }
 558   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 559   3            break;
 560   3          case FM_MODE:  //FM
 561   3      
 562   3            break;
 563   3          case AUX_MODE:  //AUX
 564   3            LCD_Show_AUX_ICO();
 565   3            if (1 == buf[4]) {
 566   4              strcpy(tmpBuf, "PLAY");
 567   4            } else if (2 == buf[4]) {
 568   4              strcpy(tmpBuf, "MUTE");
 569   4            }
 570   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 571   3            break;
 572   3          case USB_MODE:  //USB
 573   3      
 574   3            break;
 575   3          }
 576   2          break;
 577   2        }
 578   1      
 579   1        if (index) {
 580   2          index++;
 581   2      //  app_2d4_send(buf, index);
 582   2        }
 583   1      
 584   1      }
 585          
 586          void app_2d4_pro(void) {
 587   1        uint8_t i = 0;
 588   1        if (sendRcv_flag) {
 589   2          switch (ucRF_GetStatus()) {
 590   3          case TX_DS_FLAG:    // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 591   3      
 592   3            RF_ClearFIFO();
 593   3            RF_ClearStatus();
 594   3      
 595   3            sendRcv_flag = 0;
 596   3      
 597   3            for (i = 0; i < 100; i++) {
 598   4              nop
 599   4              nop
 600   4            }
 601   3      
 602   3            RF_RxMode();
 603   3      
 604   3            for (i = 0; i < 100; i++) {
 605   4              nop
 606   4              nop
 607   4            }
 608   3      //      key_bright_toggle();
 609   3      
 610   3            break;
 611   3          case RX_DR_FLAG:    //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 11  

 612   3      
 613   3            RF_ClearFIFO();
 614   3            RF_ClearStatus();
 615   3            break;
 616   3          case MAX_RT_FLAG:   // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 617   3      
 618   3            RF_ClearFIFO();
 619   3            RF_ClearStatus();
 620   3            break;
 621   3          default:    // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 622   3      
 623   3            for (i = 0; i < 130; i++) {
 624   4              nop
 625   4              nop
 626   4            }
 627   3      
 628   3            RF_TxData(sendBuf, PAYLOAD_WIDTH);
 629   3      
 630   3            break;
 631   3          }
 632   2      
 633   2        } else {
 634   2          if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 635   3      
 636   3            app_2d4_Rcv(rcvBuf);
 637   3          }
 638   2      
 639   2        }
 640   1      
 641   1      }
 642          #if 0
              void app_2d4_1S_pro(void) {
              
                switch (g_tWork.mode) {
                  case 'B':
              
                  app_lcd_default_string_set(" PAIRING", 8);
                  LCD_Clear_MHZ_ICO();
              
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
              
                  break;
                  case 'F':
                  app_lcd_default_string_set("FM  821 ", 8);
                  LCD_Clear_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Show_MHZ_ICO();
                  break;
                  case 'A':
                  app_lcd_default_string_set("    PLAY", 8);
                  LCD_Clear_MHZ_ICO();
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
                  break;
                  case 'U':
                  app_lcd_default_string_set("     349", 8);
                  LCD_Show_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Clear_MHZ_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/06/2017 17:03:24 PAGE 12  

                  break;
                }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3187    ----
   CONSTANT SIZE    =    246    ----
   XDATA SIZE       =     16      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
