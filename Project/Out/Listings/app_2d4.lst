C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) TABS(
                    -2) OBJECT(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017年8月16日
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          #define BT_MODE     0x01
  11          #define FM_MODE     0x02
  12          #define USB_MODE    0x03
  13          #define AUX_MODE    0x04
  14          #define DOME_MODE   0x05
  15          #define CALL_MODE   0x06
  16          
  17          static idata uint8_t sendRcv_flag = 0; //0 rcv， 1 send
  18          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  19          idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  20          
  21          static char tmpBuf[16] = { 0 };
  22          
  23          void app_2d4_init(void) {
  24   1      
  25   1        sendRcv_flag = 0;
  26   1        memset(rcvBuf, 0, PAYLOAD_WIDTH);
  27   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  28   1      
  29   1        RF_Init();
  30   1        RF_RxMode();
  31   1      
  32   1      //  RF_Carrier(1);
  33   1      }
  34          
  35          void app_2d4_send(uint8_t *d, uint8_t len) {
  36   1      
  37   1        if (len > PAYLOAD_WIDTH) {
  38   2          return;
  39   2        }
  40   1      
  41   1        RF_TxMode();
  42   1        sendRcv_flag = 1;
  43   1      
  44   1        if (sendBuf != d) {
  45   2          memcpy(sendBuf, d, len);
  46   2        }
  47   1      
  48   1      }
  49          static void speaker_status_resp(void) {
  50   1        if (g_tWork.status.bits.speaker) {
  51   2          LCD_ShowString(" BAZOOKA");
  52   2        } else {
  53   2          LCD_ShowString(" PWR OFF");
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 2   

  54   2        }
  55   1      }
  56          static void relay_status_resp(void) {
  57   1        if (g_tWork.status.bits.relay) {
  58   2          LCD_ShowString("ACC ON");
  59   2        } else {
  60   2          LCD_ShowString("ACC OFF");
  61   2        }
  62   1      
  63   1      }
  64          static void vol_resp(void) {
  65   1        char str[16] = { 0 };
  66   1      
  67   1      //  LCD_Clear_MHZ_ICO();
  68   1        LCD_Clear_upColon_ICO();
  69   1        LCD_Clear_downColon_ICO();
  70   1      
  71   1        sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  72   1        LCD_ShowString(str);
  73   1      }
  74          
  75          static void clear_lcd_resp(void) {
  76   1        LCD_ShowString("        ");
  77   1      
  78   1        LCD_Clear_upColon_ICO();
  79   1        LCD_Clear_downColon_ICO();
  80   1      }
  81          static void BT_pause_show_lcd_resp(void) {
  82   1        LCD_ShowString("   PAUSE");
  83   1      }
  84          #if 0
              static void BT_play_show_lcd_resp(void) {
                LCD_ShowString("    PLAY");
              }
              static void FM_scanning_show_lcd_resp(void) {
                LCD_ShowString("SCANNING");
                LCD_Clear_upColon_ICO();
                LCD_Clear_downColon_ICO();
                LCD_Clear_MHZ_ICO();
              }
              
              static void FM_ok_show_lcd_resp(void) {
                LCD_ShowString("FM 1027 ");
                LCD_Clear_upColon_ICO();
                LCD_Show_downColon_ICO();
                LCD_Show_MHZ_ICO();
              }
              #endif
 102          static void AUX_mute_show_lcd_resp(void) {
 103   1        LCD_ShowString("   MUTE ");
 104   1      }
 105          
 106          static void USB_pause_show_lcd_resp(void) {
 107   1        LCD_ShowString("   PAUSE");
 108   1        LCD_Clear_upColon_ICO();
 109   1        LCD_Clear_downColon_ICO();
 110   1      }
 111          #if 0
              static void USB_time_show_lcd_resp(void) {
                LCD_ShowString("     349");
                LCD_Show_upColon_ICO();
                LCD_Show_downColon_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 3   

              }
              #endif
 118          static void BT_next_show_lcd_resp(void) {
 119   1        LCD_ShowString("   NEXT ");
 120   1        LCD_Clear_upColon_ICO();
 121   1        LCD_Clear_downColon_ICO();
 122   1      }
 123          static void BT_prev_show_lcd_resp(void) {
 124   1        LCD_ShowString("   PREV ");
 125   1        LCD_Clear_upColon_ICO();
 126   1        LCD_Clear_downColon_ICO();
 127   1      }
 128          static void FM_station_show_lcd_resp(void) {
 129   1        sprintf(tmpBuf, "    ST%u", (uint16_t) g_tWork.FM_station);
 130   1        LCD_ShowString(tmpBuf);
 131   1        LCD_Clear_MHZ_ICO();
 132   1        LCD_Clear_upColon_ICO();
 133   1        LCD_Show_downColon_ICO();
 134   1      }
 135          static void USB_track_show_lcd_resp(void) {
 136   1        sprintf(tmpBuf, "TR %u", g_tWork.track);
 137   1        LCD_ShowString(tmpBuf);
 138   1        LCD_Clear_upColon_ICO();
 139   1        LCD_Clear_downColon_ICO();
 140   1      }
 141          static void LED_show_blink_name_show_lcd_resp(void) {
 142   1      //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 143   1        LCD_ShowString(tmpBuf);
 144   1      //  LCD_ShowString("PAUSE");
 145   1        LCD_Clear_upColon_ICO();
 146   1        LCD_Clear_downColon_ICO();
 147   1      }
 148          static void LED_clear_blink_name_show_lcd_resp(void) {
 149   1        //  sprintf(tmpBuf, "TR %u", g_tWork.track);
 150   1        LCD_ShowString("        ");
 151   1        LCD_Clear_upColon_ICO();
 152   1        LCD_Clear_downColon_ICO();
 153   1      }
 154          
 155          //static char testbuf[16] = { 0 };
 156          
 157          static void app_2d4_Rcv(uint8_t *buf) {
 158   1        uint8_t i = 0;
 159   1        uint8_t index = 0;
 160   1        uint8_t check = 0;
 161   1      
 162   1        if (buf[0] != LAMP2LCD_HEADER) {
 163   2          return;
 164   2        }
 165   1      //  key_bright_toggle();
 166   1        if (buf[1] > PAYLOAD_WIDTH) {
 167   2          return;
 168   2        }
 169   1        for (i = 0; i < (buf[1] + 1); i++) {
 170   2          check += buf[i + 1];
 171   2        }
 172   1        if (check != buf[buf[1] + 2]) {
 173   2          return;
 174   2        }
 175   1      
 176   1      //    memset(testbuf, 0, 16);
 177   1      //  sprintf(testbuf, "R%02X", (uint16_t)buf[2]);
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 4   

 178   1      //  app_lcd_default_string_set(testbuf, strlen(testbuf));
 179   1      
 180   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
 181   1        index = 0;
 182   1        app_work_cnt_clear();
 183   1      //  switch (0) {
 184   1        switch (buf[2]) {
 185   2        case LED_MODE_MSG_CMD: {
 186   3          LED_MODE_MSG_ST led_mode_msg;
 187   3          memset((uint8_t *) &led_mode_msg, 0, sizeof(LED_MODE_MSG_ST));
 188   3      
 189   3          LCD_Show_LED_ICO();
 190   3      
 191   3          LCD_Clear_MHZ_ICO();
 192   3          LCD_Clear_FM_ICO();
 193   3          LCD_Clear_USB_ICO();
 194   3          LCD_Clear_AUX_ICO();
 195   3          LCD_Clear_BLUETooTH_ICO();
 196   3          switch (buf[3]) { //蓝牙模块工作模式
 197   4          case BT_MODE:
 198   4            LCD_Show_BLUETooTH_ICO();
 199   4            break;
 200   4          case FM_MODE:
 201   4            LCD_Show_FM_ICO();
 202   4            break;
 203   4          case USB_MODE:
 204   4            LCD_Show_USB_ICO();
 205   4            break;
 206   4          case AUX_MODE:
 207   4            LCD_Show_AUX_ICO();
 208   4            break;
 209   4          case DOME_MODE:
 210   4            break;
 211   4          case CALL_MODE:
 212   4            break;
 213   4          }
 214   3      
 215   3          memset((uint8_t *) tmpBuf, 0, sizeof(tmpBuf));
 216   3          memcpy(tmpBuf, buf + 4, 8);
 217   3          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 218   3      
 219   3          led_mode_msg.status.allbits = buf[12];
 220   3          if (led_mode_msg.status.bits.pp) {
 221   4            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 222   4            Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 223   4            if (0 == app_repeat_IsEnable()) {
 224   5              Repeat_Start(6, 6, 0);
 225   5            }
 226   4          } else {
 227   4            if (app_repeat_IsEnable()) {
 228   5              Repeat_Stop();
 229   5            }
 230   4          }
 231   3      
 232   3        }
 233   2          break;
 234   2        case RCV_POWER_STATUS_CMD:
 235   2          Repeat_Stop();
 236   2      
 237   2          LCD_Clear_downColon_ICO();
 238   2          LCD_Clear_upColon_ICO();
 239   2      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 5   

 240   2          LCD_Clear_MHZ_ICO();
 241   2          LCD_Clear_FM_ICO();
 242   2          LCD_Clear_USB_ICO();
 243   2          LCD_Clear_AUX_ICO();
 244   2          LCD_Clear_BLUETooTH_ICO();
 245   2      
 246   2          if (buf[3] == 0x01) {
 247   3            g_tWork.status.bits.speaker = 1;
 248   3            Repeat_SetStart(speaker_status_resp);
 249   3            Repeat_SetStop(0);
 250   3            Repeat_Start(50, 1, 1);
 251   3          } else if (buf[3] == 0x02) {
 252   3            g_tWork.status.bits.speaker = 0;
 253   3            Repeat_SetStart(speaker_status_resp);
 254   3            Repeat_SetStop(0);
 255   3            Repeat_Start(20, 1, 0);
 256   3          }
 257   2          break;
 258   2        case RCV_X_BOX_STATUS_CMD:
 259   2      //    switch (buf[3]) {
 260   2      //    case BT_MODE:
 261   2      //
 262   2      //      break;
 263   2      //    case FM_MODE:
 264   2      //
 265   2      //      break;
 266   2      //    case AUX_MODE:  //AUX
 267   2      //
 268   2      //      break;
 269   2      //    case USB_MODE:  //USB
 270   2      //
 271   2      //      break;
 272   2      //    case DOME_MODE:  //LED
 273   2      //
 274   2      //      break;
 275   2      //    case CALL_MODE:
 276   2      //      break;
 277   2      //    }
 278   2      
 279   2          break;
 280   2        case RCV_BT_STATUS_CMD:
 281   2          switch (buf[3]) {
 282   3          case BT_MODE:
 283   3      //      Repeat_Stop();
 284   3            if (g_tWork.mode != BT_MODE) {
 285   4              Repeat_Stop();
 286   4              g_tWork.mode = BT_MODE;
 287   4            }
 288   3            LCD_Clear_MHZ_ICO();
 289   3            LCD_Clear_FM_ICO();
 290   3            LCD_Clear_USB_ICO();
 291   3            LCD_Clear_AUX_ICO();
 292   3      
 293   3            LCD_Show_BLUETooTH_ICO();
 294   3            if (buf[4] == 0x01) {
 295   4              sprintf(tmpBuf, " PAIRING");
 296   4            } else if (buf[4] == 0x02) {
 297   4              sprintf(tmpBuf, "  PAIRED");
 298   4            } else if (buf[4] == 0x03) {
 299   4              sprintf(tmpBuf, "TWS SCAN");
 300   4            } else if (buf[4] == 0x04) {
 301   4              sprintf(tmpBuf, "  TWS OK");
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 6   

 302   4            }
 303   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 304   3            break;
 305   3          case FM_MODE:
 306   3            if (buf[4] == 0x01) {
 307   4      
 308   4            } else if (buf[4] == 0x02) {
 309   4      
 310   4            } else if (buf[4] == 0x03) {
 311   4      
 312   4            } else if (buf[4] == 0x04) {
 313   4      
 314   4            }
 315   3      
 316   3            Repeat_Stop();
 317   3            LCD_Clear_All();
 318   3      
 319   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 320   3                (uint16_t) buf[4]);
 321   3      
 322   3      //      app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 323   3      
 324   3            break;
 325   3          case AUX_MODE:  //AUX
 326   3      
 327   3            break;
 328   3          case USB_MODE:  //USB
 329   3      
 330   3            break;
 331   3          case DOME_MODE:  //LED
 332   3      
 333   3            break;
 334   3          case CALL_MODE:
 335   3            break;
 336   3          }
 337   2          break;
 338   2        case RCV_PLAY_PAUSE_STATUS_CMD:
 339   2          switch (buf[3]) {
 340   3          case BT_MODE:
 341   3            if (1 == buf[4]) {
 342   4              Repeat_Stop();
 343   4      
 344   4      //        Repeat_SetStart(BT_play_show_lcd_resp);
 345   4      //        Repeat_SetStop(0);
 346   4      //        Repeat_Start(20, 1, 1);
 347   4      
 348   4            } else if (2 == buf[4]) {
 349   4              Repeat_SetStart(BT_pause_show_lcd_resp);
 350   4              Repeat_SetStop(clear_lcd_resp);
 351   4              Repeat_Start(6, 6, 0);
 352   4            }
 353   3            break;
 354   3          case FM_MODE:
 355   3            if (2 == buf[4]) {
 356   4              sprintf(tmpBuf, "SCANNING");
 357   4              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 358   4            } else if (1 == buf[4]) {
 359   4              //        Repeat_SetStart(FM_ok_show_lcd_resp);
 360   4              //        Repeat_SetStop(0);
 361   4              //        Repeat_Start(10, 1, 1);
 362   4            }
 363   3            break;
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 7   

 364   3          case AUX_MODE:  //AUX
 365   3          {
 366   4            static BIT aux_pause_lock = 0;
 367   4            LCD_Clear_downColon_ICO();
 368   4            LCD_Clear_upColon_ICO();
 369   4      
 370   4            LCD_Clear_MHZ_ICO();
 371   4            LCD_Clear_FM_ICO();
 372   4            LCD_Clear_USB_ICO();
 373   4            LCD_Clear_AUX_ICO();
 374   4            LCD_Clear_BLUETooTH_ICO();
 375   4      
 376   4            LCD_Show_AUX_ICO();
 377   4            if (1 == buf[4]) {
 378   5              if (aux_pause_lock) {
 379   6                Repeat_Stop();
 380   6                aux_pause_lock = 0;
 381   6              }
 382   5              sprintf(tmpBuf, "    PLAY");
 383   5              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 384   5            } else if (2 == buf[4]) {
 385   5              aux_pause_lock = 1;
 386   5              Repeat_SetStart(AUX_mute_show_lcd_resp);
 387   5              Repeat_SetStop(clear_lcd_resp);
 388   5              Repeat_Start(7, 7, 0);
 389   5            }
 390   4          }
 391   3            break;
 392   3          case USB_MODE:  //USB
 393   3            if (1 == buf[4]) {
 394   4              Repeat_Stop();
 395   4              //        Repeat_SetStart(USB_time_show_lcd_resp);
 396   4              //        Repeat_SetStop(0);
 397   4              //        Repeat_Start(10, 1, 1);
 398   4            } else if (2 == buf[4]) {
 399   4              Repeat_SetStart(USB_pause_show_lcd_resp);
 400   4              Repeat_SetStop(clear_lcd_resp);
 401   4              Repeat_Start(10, 10, 0);
 402   4            }
 403   3            break;
 404   3          case DOME_MODE:  //LED
 405   3            if (1 == buf[4]) { //pause
 406   4              memcpy(tmpBuf, buf + 5, 8);
 407   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 408   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 409   4              Repeat_Start(6, 6, 0);
 410   4      
 411   4            } else {
 412   4              app_lcd_default_string_set(buf + 5, 8, 0);
 413   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 414   4      //        Repeat_SetStop(0);
 415   4      //        Repeat_Start(1, 1, 1);
 416   4            }
 417   3            break;
 418   3          case CALL_MODE:
 419   3            break;
 420   3          }
 421   2      
 422   2          break;
 423   2        case RCV_PREV_NEXT_CMD:
 424   2          switch (buf[3]) {
 425   3          case BT_MODE:  //BT
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 8   

 426   3            if (buf[4] == 1) { //up
 427   4              Repeat_SetStart(BT_prev_show_lcd_resp);
 428   4              Repeat_SetStop(0);
 429   4              Repeat_Start(30, 1, 1);
 430   4            } else if (buf[4] == 2) { //down
 431   4              Repeat_SetStart(BT_next_show_lcd_resp);
 432   4              Repeat_SetStop(0);
 433   4              Repeat_Start(30, 1, 1);
 434   4            }
 435   3            break;
 436   3          case FM_MODE:  //FM
 437   3            Repeat_Stop();
 438   3            g_tWork.FM_station = buf[5];
 439   3            Repeat_SetStart(FM_station_show_lcd_resp);
 440   3            Repeat_SetStop(0);
 441   3            Repeat_Start(30, 1, 1);
 442   3            break;
 443   3          case AUX_MODE:  //AUX
 444   3            break;
 445   3          case USB_MODE:  //USB
 446   3            g_tWork.track = buf[6];
 447   3            g_tWork.track |= (buf[5] << 8);
 448   3            Repeat_SetStart(USB_track_show_lcd_resp);
 449   3            Repeat_SetStop(0);
 450   3            Repeat_Start(30, 1, 1);
 451   3      
 452   3            break;
 453   3          case DOME_MODE:  //LED
 454   3            app_lcd_default_string_set(buf + 4, 8, 0);
 455   3            break;
 456   3          case CALL_MODE:
 457   3            break;
 458   3          default:
 459   3            break;
 460   3          }
 461   2          break;
 462   2        case RCV_USB_PLAY_TIME_CMD:
 463   2          if (g_tWork.mode != USB_MODE) {
 464   3            Repeat_Stop();
 465   3            g_tWork.mode = USB_MODE;
 466   3          }
 467   2          LCD_Clear_MHZ_ICO();
 468   2          LCD_Clear_FM_ICO();
 469   2          LCD_Clear_BLUETooTH_ICO();
 470   2          LCD_Clear_AUX_ICO();
 471   2      
 472   2          LCD_Show_USB_ICO();
 473   2          if (buf[3] > 9) {
 474   3            sprintf(tmpBuf, "    %u%02u", (uint16_t) buf[3], (uint16_t) buf[4]);
 475   3          } else {
 476   3            sprintf(tmpBuf, "     %u%02u", (uint16_t) buf[3],
 477   3                (uint16_t) buf[4]);
 478   3          }
 479   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 3);
 480   2          break;
 481   2        case RCV_FM_HZ_CMD:
 482   2          if (g_tWork.mode != FM_MODE) {
 483   3            Repeat_Stop();
 484   3            g_tWork.mode = FM_MODE;
 485   3          }
 486   2      
 487   2          LCD_Clear_USB_ICO();
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 9   

 488   2          LCD_Clear_MHZ_ICO();
 489   2          LCD_Clear_BLUETooTH_ICO();
 490   2          LCD_Clear_AUX_ICO();
 491   2      
 492   2          LCD_Show_FM_ICO();
 493   2          LCD_Show_MHZ_ICO();
 494   2      
 495   2          if (buf[3] > 99) {
 496   3            sprintf(tmpBuf, "FM %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 497   3          } else if (buf[3] > 9) {
 498   3            sprintf(tmpBuf, "FM  %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 499   3          } else {
 500   3            sprintf(tmpBuf, "FM   %u%u", (uint16_t) buf[3], (uint16_t) buf[4]);
 501   3          }
 502   2          app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 1);
 503   2          break;
 504   2        case RCV_VOL_CMD:
 505   2          g_tWork.vol = buf[3] & 0x7F;
 506   2          Repeat_SetStart(vol_resp);
 507   2          Repeat_SetStop(0);
 508   2          Repeat_Start(30, 1, 1);
 509   2          break;
 510   2      ////
 511   2        case KEY_POWER_SHORT_CMD:
 512   2          if (1 == buf[3]) { //pause
 513   3            memcpy(tmpBuf, buf + 4, 8);
 514   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 515   3            Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 516   3            Repeat_Start(6, 6, 0);
 517   3          } else {
 518   3            app_lcd_default_string_set(buf + 4, 8, 0);
 519   3            Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 520   3            Repeat_SetStop(0);
 521   3            Repeat_Start(1, 1, 1);
 522   3          }
 523   2          break;
 524   2        case KEY_ACC_CMD:
 525   2          LCD_Clear_downColon_ICO();
 526   2          LCD_Clear_upColon_ICO();
 527   2          if (buf[3] == 1) {
 528   3            g_tWork.status.bits.relay = 1;
 529   3          } else {
 530   3            g_tWork.status.bits.relay = 0;
 531   3          }
 532   2          Repeat_SetStart(relay_status_resp);
 533   2          Repeat_SetStop(0);
 534   2          Repeat_Start(20, 1, 1);
 535   2          break;
 536   2        case KEY_DOME_CMD:
 537   2      #if 0
                  sendBuf[index++] = LAMP2LCD_HEADER;
                  sendBuf[index++] = 11;
                  sendBuf[index++] = KEY_DOME_CMD;
                  sendBuf[index++] = g_tWork.status.bits.DOME;
                  sendBuf[index++] = g_tWork.status.bits.pause;
                  app_dome_get_current_Name(sendBuf + index, 8);
                  index += 8;
                  for (i = 0; i < (sendBuf[1] + 1); i++) {
                    sendBuf[index] += sendBuf[i + 1];
                  }
              #endif
 549   2          if (buf[3] == 1) {
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 10  

 550   3            LCD_Show_LED_ICO();
 551   3            if (1 == buf[4]) { //pause
 552   4              memcpy(tmpBuf, buf + 5, 8);
 553   4              for (i = 0; i < sizeof(tmpBuf); i++) {
 554   5                if (*(tmpBuf + i) == 0) {
 555   6                  *(tmpBuf + i) = ' ';
 556   6                }
 557   5              }
 558   4              Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 559   4              Repeat_SetStop(LED_clear_blink_name_show_lcd_resp);
 560   4              Repeat_Start(5, 5, 0);
 561   4            } else {
 562   4      //        memcpy(tmpBuf, buf + 5, 8);
 563   4              app_lcd_default_string_set(buf + 5, 8, 0);
 564   4      
 565   4      //        Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 566   4      //        Repeat_SetStop(0);
 567   4      //        Repeat_Start(1, 1, 1);
 568   4            }
 569   3          } else {
 570   3            LCD_Clear_LED_ICO();
 571   3          }
 572   2          break;
 573   2        case KEY_UP_CMD:
 574   2          memcpy(tmpBuf, buf + 3, 8);
 575   2          app_lcd_default_string_set(buf + 3, 8, 0);
 576   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 577   2          Repeat_SetStop(0);
 578   2          Repeat_Start(1, 1, 1);
 579   2          break;
 580   2        case KEY_DOWN_CMD:
 581   2          memcpy(tmpBuf, buf + 3, 8);
 582   2          app_lcd_default_string_set(buf + 3, 8, 0);
 583   2          Repeat_SetStart(LED_show_blink_name_show_lcd_resp);
 584   2          Repeat_SetStop(0);
 585   2          Repeat_Start(1, 1, 1);
 586   2          break;
 587   2        case MODE_CHANGE_CMD:
 588   2          LCD_Clear_MHZ_ICO();
 589   2          LCD_Clear_upColon_ICO();
 590   2          LCD_Clear_downColon_ICO();
 591   2          LCD_Clear_BLUETooTH_ICO();
 592   2          LCD_Clear_FM_ICO();
 593   2          LCD_Clear_AUX_ICO();
 594   2          LCD_Clear_USB_ICO();
 595   2      
 596   2          switch (buf[3]) {
 597   3          case BT_MODE:  //BT
 598   3            LCD_Show_BLUETooTH_ICO();
 599   3            if (1 == buf[4]) {
 600   4              strcpy(tmpBuf, "PRIRED");
 601   4            } else if (2 == buf[4]) {
 602   4              strcpy(tmpBuf, "PAIRING");
 603   4            }
 604   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 605   3            break;
 606   3          case FM_MODE:  //FM
 607   3      
 608   3            break;
 609   3          case AUX_MODE:  //AUX
 610   3            LCD_Show_AUX_ICO();
 611   3            if (1 == buf[4]) {
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 11  

 612   4              strcpy(tmpBuf, "PLAY");
 613   4            } else if (2 == buf[4]) {
 614   4              strcpy(tmpBuf, "MUTE");
 615   4            }
 616   3            app_lcd_default_string_set(tmpBuf, strlen(tmpBuf), 0);
 617   3            break;
 618   3          case USB_MODE:  //USB
 619   3      
 620   3            break;
 621   3          }
 622   2          break;
 623   2        }
 624   1      
 625   1        if (index) {
 626   2          index++;
 627   2      //  app_2d4_send(buf, index);
 628   2        }
 629   1      
 630   1      }
 631          
 632          void app_2d4_pro(void) {
 633   1        uint8_t i = 0;
 634   1        if (sendRcv_flag) {
 635   2          switch (ucRF_GetStatus()) {
 636   3          case TX_DS_FLAG:    // 普通型发送完成 或 增强型发送成功
 637   3      
 638   3            RF_ClearFIFO();
 639   3            RF_ClearStatus();
 640   3      
 641   3            sendRcv_flag = 0;
 642   3      
 643   3            for (i = 0; i < 100; i++) {
 644   4              nop
 645   4              nop
 646   4            }
 647   3      
 648   3            RF_RxMode();
 649   3      
 650   3            for (i = 0; i < 100; i++) {
 651   4              nop
 652   4              nop
 653   4            }
 654   3      //      key_bright_toggle();
 655   3      
 656   3            break;
 657   3          case RX_DR_FLAG:    //发送成功且收到payload
 658   3      
 659   3            RF_ClearFIFO();
 660   3            RF_ClearStatus();
 661   3            break;
 662   3          case MAX_RT_FLAG:   // 增强型发送超时失败
 663   3      
 664   3            RF_ClearFIFO();
 665   3            RF_ClearStatus();
 666   3            break;
 667   3          default:    // rf 处于空闲状态才发送数据
 668   3      
 669   3            for (i = 0; i < 130; i++) {
 670   4              nop
 671   4              nop
 672   4            }
 673   3      
C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 12  

 674   3            RF_TxData(sendBuf, PAYLOAD_WIDTH);
 675   3      
 676   3            break;
 677   3          }
 678   2      
 679   2        } else {
 680   2          if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 681   3      
 682   3            app_2d4_Rcv(rcvBuf);
 683   3          }
 684   2      
 685   2        }
 686   1      
 687   1      }
 688          #if 0
              void app_2d4_1S_pro(void) {
              
                switch (g_tWork.mode) {
                  case 'B':
              
                  app_lcd_default_string_set(" PAIRING", 8);
                  LCD_Clear_MHZ_ICO();
              
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
              
                  break;
                  case 'F':
                  app_lcd_default_string_set("FM  821 ", 8);
                  LCD_Clear_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Show_MHZ_ICO();
                  break;
                  case 'A':
                  app_lcd_default_string_set("    PLAY", 8);
                  LCD_Clear_MHZ_ICO();
                  LCD_Clear_upColon_ICO();
                  LCD_Clear_downColon_ICO();
                  break;
                  case 'U':
                  app_lcd_default_string_set("     349", 8);
                  LCD_Show_upColon_ICO();
                  LCD_Show_downColon_ICO();
              
                  LCD_Clear_MHZ_ICO();
                  break;
                }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3398    ----
   CONSTANT SIZE    =    246    ----
   XDATA SIZE       =     16      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.52.0.0   APP_2D4                                                           12/15/2017 16:05:14 PAGE 13  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
