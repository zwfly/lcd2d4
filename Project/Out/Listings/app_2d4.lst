C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  11          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  12          static idata uint8_t sendBuf[PAYLOAD_WIDTH] = {0};
  13          
  14          static char tmpBuf[16] = { 0 };
  15          
  16          void app_2d4_init(void) {
  17   1      
  18   1              sendRcv_flag = 0;
  19   1              memset(rcvBuf, 0, PAYLOAD_WIDTH);
  20   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  21   1      
  22   1              RF_Init();
  23   1              RF_RxMode();
  24   1      
  25   1      //      RF_Carrier(1);
  26   1      }
  27          
  28          void app_2d4_send(uint8_t *d, uint8_t len) {
  29   1      
  30   1              if (len > PAYLOAD_WIDTH) {
  31   2                      return;
  32   2              }
  33   1      
  34   1              RF_TxMode();
  35   1              sendRcv_flag = 1;
  36   1      
  37   1              if (sendBuf != d) {
  38   2                      memcpy(sendBuf, d, len);
  39   2              }
  40   1      
  41   1      }
  42          static void speaker_status_resp(void) {
  43   1              if (g_tWork.status.bits.speaker) {
  44   2                      LCD_ShowString(" BAZOOKA");
  45   2              } else {
  46   2                      LCD_ShowString(" PWR OFF");
  47   2              }
  48   1      }
  49          static void relay_status_resp(void) {
  50   1              if (g_tWork.status.bits.relay) {
  51   2                      LCD_ShowString("RELAY ON");
  52   2              } else {
  53   2                      LCD_ShowString("RELAYOFF");
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 2   

  54   2              }
  55   1      
  56   1      }
  57          static void vol_resp(void) {
  58   1              char str[16] = { 0 };
  59   1      
  60   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  61   1              LCD_ShowString(str);
  62   1      }
  63          static void mode_resp(void) {
  64   1              char str[16] = { 0 };
  65   1      
  66   1              switch (g_tWork.mode) {
  67   2              case 'B':
  68   2                      g_tWork.mode = 'F';
  69   2                      break;
  70   2              case 'F':
  71   2                      g_tWork.mode = 'A';
  72   2                      break;
  73   2              case 'A':
  74   2                      g_tWork.mode = 'U';
  75   2                      break;
  76   2              case 'U':
  77   2                      g_tWork.mode = 'B';
  78   2                      break;
  79   2              }
  80   1      
  81   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  82   1              LCD_ShowString(str);
  83   1      }
  84          static void clear_lcd_resp(void) {
  85   1              LCD_ShowString("        ");
  86   1      
  87   1              LCD_Clear_upColon_ICO();
  88   1              LCD_Clear_downColon_ICO();
  89   1      }
  90          static void BT_pause_show_lcd_resp(void) {
  91   1              LCD_ShowString("   PAUSE");
  92   1      }
  93          
  94          static void BT_play_show_lcd_resp(void) {
  95   1              LCD_ShowString("    PLAY");
  96   1      }
  97          static void FM_scanning_show_lcd_resp(void) {
  98   1              LCD_ShowString("SCANNING");
  99   1              LCD_Clear_upColon_ICO();
 100   1              LCD_Clear_downColon_ICO();
 101   1              LCD_Clear_MHZ_ICO();
 102   1      }
 103          
 104          static void FM_ok_show_lcd_resp(void) {
 105   1              LCD_ShowString("FM 1027 ");
 106   1              LCD_Clear_upColon_ICO();
 107   1              LCD_Show_downColon_ICO();
 108   1              LCD_Show_MHZ_ICO();
 109   1      
 110   1      }
 111          static void AUX_mute_show_lcd_resp(void) {
 112   1              LCD_ShowString("   MUTE ");
 113   1      }
 114          
 115          static void AUX_play_show_lcd_resp(void) {
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 3   

 116   1              LCD_ShowString("    PLAY");
 117   1      
 118   1      }
 119          static void USB_pause_show_lcd_resp(void) {
 120   1              LCD_ShowString("   PAUSE");
 121   1              LCD_Clear_upColon_ICO();
 122   1              LCD_Clear_downColon_ICO();
 123   1      }
 124          
 125          static void USB_time_show_lcd_resp(void) {
 126   1              LCD_ShowString("     349");
 127   1              LCD_Show_upColon_ICO();
 128   1              LCD_Show_downColon_ICO();
 129   1      }
 130          static void app_2d4_Rcv(uint8_t *buf) {
 131   1              uint8_t i = 0;
 132   1              uint8_t index = 0;
 133   1              uint8_t check = 0;
 134   1      
 135   1              if (buf[0] != LAMP2LCD_HEADER) {
 136   2                      return;
 137   2              }
 138   1              key_bright_toggle();
 139   1              if (buf[1] > PAYLOAD_WIDTH) {
 140   2                      return;
 141   2              }
 142   1              for (i = 0; i < (buf[1] + 1); i++) {
 143   2                      check += buf[i + 1];
 144   2              }
 145   1              if (check != buf[buf[1] + 2]) {
 146   2                      return;
 147   2              }
 148   1      
 149   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
 150   1              index = 0;
 151   1              switch (buf[2]) {
 152   2              case POWER_SHORT_CMD:
 153   2      
 154   2                      break;
 155   2              case POWER_LONG_CMD:
 156   2      
 157   2                      if (buf[3]) {
 158   3                              g_tWork.status.bits.speaker = 1;
 159   3                              Repeat_SetStart(speaker_status_resp);
 160   3                              Repeat_SetStop(0);
 161   3      
 162   3                              Repeat_Start(20, 1, 1);
 163   3                      } else {
 164   3                              g_tWork.status.bits.speaker = 0;
 165   3                              Repeat_SetStart(speaker_status_resp);
 166   3                              Repeat_SetStop(0);
 167   3      
 168   3                              Repeat_Start(20, 1, 0);
 169   3                      }
 170   2      
 171   2                      break;
 172   2              case ACC_CMD:
 173   2      
 174   2                      if (buf[3] == 1) {
 175   3                              g_tWork.status.bits.relay = 1;
 176   3                      } else {
 177   3                              g_tWork.status.bits.relay = 0;
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 4   

 178   3                      }
 179   2      
 180   2                      Repeat_SetStart(relay_status_resp);
 181   2                      Repeat_SetStop(0);
 182   2      
 183   2                      Repeat_Start(20, 1, 1);
 184   2      
 185   2                      break;
 186   2              case UP_CMD:
 187   2      
 188   2                      break;
 189   2              case DOWN_CMD:
 190   2      
 191   2                      break;
 192   2              case DOME_CMD:
 193   2                      break;
 194   2              case VOL_ADD_CMD:
 195   2                      g_tWork.vol = buf[3];
 196   2      
 197   2                      Repeat_SetStart(vol_resp);
 198   2                      Repeat_SetStop(0);
 199   2      
 200   2                      Repeat_Start(20, 1, 1);
 201   2                      break;
 202   2              case VOL_MINUS_CMD:
 203   2                      g_tWork.vol = buf[3];
 204   2      
 205   2                      Repeat_SetStart(vol_resp);
 206   2                      Repeat_SetStop(0);
 207   2      
 208   2                      Repeat_Start(20, 1, 1);
 209   2                      break;
 210   2              case PLAY_CMD:
 211   2                      g_tWork.mode = buf[3];
 212   2                      switch (g_tWork.mode) {
 213   3                      case 0x01:  //BT
 214   3                              if (1 == buf[4]) {
 215   4                                      Repeat_SetStart(BT_play_show_lcd_resp);
 216   4                                      Repeat_SetStop(0);
 217   4                                      Repeat_Start(20, 1, 1);
 218   4                              } else if (2 == buf[4]) {
 219   4                                      Repeat_SetStart(BT_pause_show_lcd_resp);
 220   4                                      Repeat_SetStop(clear_lcd_resp);
 221   4                                      Repeat_Start(10, 10, 0);
 222   4                              }
 223   3                              break;
 224   3                      case 0x02:  //FM
 225   3                              if (2 == buf[4]) {
 226   4                                      Repeat_SetStart(FM_scanning_show_lcd_resp);
 227   4                                      Repeat_SetStop(0);
 228   4                                      Repeat_Start(20, 1, 0);
 229   4                              } else if (1 == buf[4]) {
 230   4      //                              Repeat_SetStart(FM_ok_show_lcd_resp);
 231   4      //                              Repeat_SetStop(0);
 232   4      //                              Repeat_Start(10, 1, 1);
 233   4                              }
 234   3                              break;
 235   3                      case 0x03:  //AUX
 236   3                              if (1 == buf[4]) {
 237   4                                      Repeat_SetStart(AUX_play_show_lcd_resp);
 238   4                                      Repeat_SetStop(clear_lcd_resp);
 239   4                                      Repeat_Start(10, 10, 0);
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 5   

 240   4                              } else if (2 == buf[4]) {
 241   4                                      Repeat_SetStart(AUX_mute_show_lcd_resp);
 242   4                                      Repeat_SetStop(clear_lcd_resp);
 243   4                                      Repeat_Start(10, 10, 0);
 244   4                              }
 245   3                              break;
 246   3                      case 0x04:  //USB
 247   3                              if (1 == buf[4]) {
 248   4      //                              Repeat_SetStart(USB_time_show_lcd_resp);
 249   4      //                              Repeat_SetStop(0);
 250   4      //                              Repeat_Start(10, 1, 1);
 251   4                              } else if (2 == buf[4]) {
 252   4                                      Repeat_SetStart(USB_pause_show_lcd_resp);
 253   4                                      Repeat_SetStop(clear_lcd_resp);
 254   4                                      Repeat_Start(10, 10, 0);
 255   4                              }
 256   3                              break;
 257   3                      }
 258   2      
 259   2                      break;
 260   2              case MODE_CMD:
 261   2                      g_tWork.mode = buf[3];
 262   2      
 263   2                      LCD_Clear_MHZ_ICO();
 264   2                      LCD_Clear_upColon_ICO();
 265   2                      LCD_Clear_downColon_ICO();
 266   2                      LCD_Clear_BLUETooTH_ICO();
 267   2                      LCD_Clear_FM_ICO();
 268   2                      LCD_Clear_AUX_ICO();
 269   2                      LCD_Clear_USB_ICO();
 270   2      
 271   2                      switch (g_tWork.mode) {
 272   3                      case 0x01:  //BT
 273   3      
 274   3                              LCD_Show_BLUETooTH_ICO();
 275   3                              if (1 == buf[4]) {
 276   4                                      strcpy(tmpBuf, "PRIRED");
 277   4                              } else if (2 == buf[4]) {
 278   4                                      strcpy(tmpBuf, "PAIRING");
 279   4                              }
 280   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 281   3                              break;
 282   3                      case 0x02:  //FM
 283   3                              LCD_Show_FM_ICO();
 284   3                              LCD_Show_MHZ_ICO();
 285   3                              LCD_Clear_downColon_ICO();
 286   3      
 287   3                              if (buf[4] > 99) {
 288   4                                      sprintf(tmpBuf, "FM %u%u", buf[4], buf[5]);
 289   4                              } else if (buf[4] > 9) {
 290   4                                      sprintf(tmpBuf, "FM  %u%u", buf[4], buf[5]);
 291   4                              } else {
 292   4                                      sprintf(tmpBuf, "FM   %u%u", buf[4], buf[5]);
 293   4                              }
 294   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 295   3      
 296   3                              break;
 297   3                      case 0x03:  //AUX
 298   3                              LCD_Show_AUX_ICO();
 299   3                              if (1 == buf[4]) {
 300   4                                      strcpy(tmpBuf, "PLAY");
 301   4                              } else if (2 == buf[4]) {
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 6   

 302   4                                      strcpy(tmpBuf, "MUTE");
 303   4                              }
 304   3                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 305   3      
 306   3                              break;
 307   3                      case 0x04:  //USB
 308   3                      {
 309   4                              uint16_t time = 0;
 310   4                              time = buf[4];
 311   4                              time <<= 8;
 312   4                              time |= buf[5];
 313   4                              LCD_Show_USB_ICO();
 314   4      
 315   4                              if ((time / 60) > 99) {
 316   5                                      sprintf(tmpBuf, "   %u%02u", time / 60, time % 60);
 317   5                              } else if ((time / 60) > 9) {
 318   5                                      sprintf(tmpBuf, "    %u%02u", time / 60, time % 60);
 319   5                              } else {
 320   5                                      sprintf(tmpBuf, "     %u%02u", time / 60, time % 60);
 321   5                              }
 322   4                              app_lcd_default_string_set(tmpBuf, strlen(tmpBuf));
 323   4                      }
 324   3                              break;
 325   3                      }
 326   2                      break;
 327   2              }
 328   1              if (index) {
 329   2                      index++;
 330   2      //      app_2d4_send(buf, index);
 331   2              }
 332   1      
 333   1      }
 334          
 335          void app_2d4_pro(void) {
 336   1              if (sendRcv_flag) {
 337   2      
 338   2                      switch (ucRF_GetStatus()) {
 339   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 340   3      
 341   3                              RF_ClearFIFO();
 342   3                              RF_ClearStatus();
 343   3      
 344   3                              sendRcv_flag = 0;
 345   3                              RF_RxMode();
 346   3      
 347   3      //                      key_bright_toggle();
 348   3      
 349   3                              break;
 350   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 351   3      
 352   3                              RF_ClearFIFO();
 353   3                              RF_ClearStatus();
 354   3                              break;
 355   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 356   3      
 357   3                              RF_ClearFIFO();
 358   3                              RF_ClearStatus();
 359   3                              break;
 360   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 361   3      
 362   3                              RF_TxData(sendBuf, PAYLOAD_WIDTH);
 363   3      
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/04/2017 22:09:54 PAGE 7   

 364   3                              break;
 365   3                      }
 366   2      
 367   2              } else {
 368   2                      if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 369   3      
 370   3                              app_2d4_Rcv(rcvBuf);
 371   3                      }
 372   2      
 373   2              }
 374   1      
 375   1      }
 376          
 377          void app_2d4_1S_pro(void) {
 378   1      
 379   1              switch (g_tWork.mode) {
 380   2              case 'B':
 381   2      
 382   2                      app_lcd_default_string_set(" PAIRING", 8);
 383   2                      LCD_Clear_MHZ_ICO();
 384   2      
 385   2                      LCD_Clear_upColon_ICO();
 386   2                      LCD_Clear_downColon_ICO();
 387   2      
 388   2                      break;
 389   2              case 'F':
 390   2                      app_lcd_default_string_set("FM  821 ", 8);
 391   2                      LCD_Clear_upColon_ICO();
 392   2                      LCD_Show_downColon_ICO();
 393   2      
 394   2                      LCD_Show_MHZ_ICO();
 395   2                      break;
 396   2              case 'A':
 397   2                      app_lcd_default_string_set("    PLAY", 8);
 398   2                      LCD_Clear_MHZ_ICO();
 399   2                      LCD_Clear_upColon_ICO();
 400   2                      LCD_Clear_downColon_ICO();
 401   2                      break;
 402   2              case 'U':
 403   2                      app_lcd_default_string_set("     349", 8);
 404   2                      LCD_Show_upColon_ICO();
 405   2                      LCD_Show_downColon_ICO();
 406   2      
 407   2                      LCD_Clear_MHZ_ICO();
 408   2                      break;
 409   2              }
 410   1      
 411   1      }
 412          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2005    ----
   CONSTANT SIZE    =    242    ----
   XDATA SIZE       =     16      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
