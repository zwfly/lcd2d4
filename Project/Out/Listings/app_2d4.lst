C51 COMPILER V9.56.0.0   APP_2D4                                                           08/30/2017 23:22:32 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  11          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = { 0 };
  12          static idata uint8_t sendBuf[PAYLOAD_WIDTH] = { 0 };
  13          
  14          void app_2d4_init(void) {
  15   1      
  16   1              sendRcv_flag = 0;
  17   1              memset(rcvBuf, 0, sizeof(rcvBuf));
  18   1              memset(sendBuf, 0, sizeof(sendBuf));
  19   1      
  20   1              RF_Init();
  21   1              RF_RxMode();
  22   1      
  23   1      //      RF_Carrier(1);
  24   1      
  25   1      }
  26          
  27          void app_2d4_send(uint8_t *d, uint8_t len) {
  28   1      
  29   1              if (len > sizeof(sendBuf)) {
  30   2                      return;
  31   2              }
  32   1      
  33   1              RF_TxMode();
  34   1              sendRcv_flag = 1;
  35   1      
  36   1              if (sendBuf != d) {
  37   2                      memcpy(sendBuf, d, len);
  38   2              }
  39   1      
  40   1      }
  41          static void speaker_status_resp(void) {
  42   1              if (g_tWork.status.bits.speaker) {
  43   2                      LCD_ShowString(" BAZOOKA");
  44   2              } else {
  45   2                      LCD_ShowString(" PWR OFF");
  46   2              }
  47   1      
  48   1      }
  49          static void relay_status_resp(void) {
  50   1              if (g_tWork.status.bits.relay) {
  51   2                      LCD_ShowString("RELAY ON");
  52   2              } else {
  53   2                      LCD_ShowString("RELAYOFF");
C51 COMPILER V9.56.0.0   APP_2D4                                                           08/30/2017 23:22:32 PAGE 2   

  54   2              }
  55   1      
  56   1      }
  57          static void vol_resp(void) {
  58   1              char str[16] = { 0 };
  59   1      
  60   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  61   1              LCD_ShowString(str);
  62   1      }
  63          static void mode_resp(void) {
  64   1              char str[16] = { 0 };
  65   1      
  66   1              switch (g_tWork.mode) {
  67   2              case 'B':
  68   2                      g_tWork.mode = 'F';
  69   2                      break;
  70   2              case 'F':
  71   2                      g_tWork.mode = 'A';
  72   2                      break;
  73   2              case 'A':
  74   2                      g_tWork.mode = 'U';
  75   2                      break;
  76   2              case 'U':
  77   2                      g_tWork.mode = 'B';
  78   2                      break;
  79   2              }
  80   1      
  81   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  82   1              LCD_ShowString(str);
  83   1      }
  84          static void app_2d4_Rcv(uint8_t *buf) {
  85   1              uint8_t i = 0;
  86   1              uint8_t index = 0;
  87   1              uint8_t check = 0;
  88   1      
  89   1              if (buf[0] != LAMP2LCD_HEADER) {
  90   2                      return;
  91   2              }
  92   1              if (buf[1] > sizeof(rcvBuf)) {
  93   2                      return;
  94   2              }
  95   1              for (i = 0; i < (buf[1] + 1); i++) {
  96   2                      check += buf[i + 1];
  97   2              }
  98   1              if (check != buf[buf[1] + 2]) {
  99   2                      return;
 100   2              }
 101   1      
 102   1              memset(sendBuf, 0, sizeof(sendBuf));
 103   1              index = 0;
 104   1              switch (buf[2]) {
 105   2              case POWER_SHORT_CMD:
 106   2      
 107   2                      break;
 108   2              case POWER_LONG_CMD:
 109   2      
 110   2                      if (buf[3]) {
 111   3                              g_tWork.status.bits.speaker = 1;
 112   3                              Repeat_SetStart(speaker_status_resp);
 113   3                              Repeat_SetStop(0);
 114   3      
 115   3                              Repeat_Start(20, 1, 1);
C51 COMPILER V9.56.0.0   APP_2D4                                                           08/30/2017 23:22:32 PAGE 3   

 116   3                      } else {
 117   3                              g_tWork.status.bits.speaker = 0;
 118   3                              Repeat_SetStart(speaker_status_resp);
 119   3                              Repeat_SetStop(0);
 120   3      
 121   3                              Repeat_Start(20, 1, 0);
 122   3                      }
 123   2      
 124   2                      break;
 125   2              case ACC_CMD:
 126   2      
 127   2                      if (buf[3] == 1) {
 128   3                              g_tWork.status.bits.relay = 1;
 129   3                      } else {
 130   3                              g_tWork.status.bits.relay = 0;
 131   3                      }
 132   2      
 133   2                      Repeat_SetStart(relay_status_resp);
 134   2                      Repeat_SetStop(0);
 135   2      
 136   2                      Repeat_Start(20, 1, 1);
 137   2      
 138   2                      break;
 139   2              case UP_CMD:
 140   2      
 141   2                      break;
 142   2              case DOWN_CMD:
 143   2      
 144   2                      break;
 145   2              case DOME_CMD:
 146   2                      break;
 147   2              case VOL_ADD_CMD:
 148   2                      g_tWork.vol = buf[3];
 149   2      
 150   2                      Repeat_SetStart(vol_resp);
 151   2                      Repeat_SetStop(0);
 152   2      
 153   2                      Repeat_Start(20, 1, 1);
 154   2                      break;
 155   2              case VOL_MINUS_CMD:
 156   2                      g_tWork.vol = buf[3];
 157   2      
 158   2                      Repeat_SetStart(vol_resp);
 159   2                      Repeat_SetStop(0);
 160   2      
 161   2                      Repeat_Start(20, 1, 1);
 162   2                      break;
 163   2              case PLAY_CMD:
 164   2      
 165   2                      break;
 166   2              case MODE_CMD:
 167   2                      g_tWork.mode = (char) buf[3];
 168   2      
 169   2                      switch (g_tWork.mode) {
 170   3                      case 'B':
 171   3                              LCD_Clear_FM_ICO();
 172   3      //                      LCD_Show_FM_ICO();
 173   3      //                      LCD_Clear_BLUETooTH_ICO();
 174   3                              LCD_Show_BLUETooTH_ICO();
 175   3                              LCD_Clear_AUX_ICO();
 176   3      //                      LCD_Show_AUX_ICO();
 177   3                              LCD_Clear_USB_ICO();
C51 COMPILER V9.56.0.0   APP_2D4                                                           08/30/2017 23:22:32 PAGE 4   

 178   3      //                      LCD_Show_USB_ICO();
 179   3                              break;
 180   3                      case 'F':
 181   3      //                      LCD_Clear_FM_ICO();
 182   3                              LCD_Show_FM_ICO();
 183   3                              LCD_Clear_BLUETooTH_ICO();
 184   3      //                      LCD_Show_BLUETooTH_ICO();
 185   3                              LCD_Clear_AUX_ICO();
 186   3      //                      LCD_Show_AUX_ICO();
 187   3                              LCD_Clear_USB_ICO();
 188   3      //                      LCD_Show_USB_ICO();
 189   3                              break;
 190   3                      case 'A':
 191   3                              LCD_Clear_FM_ICO();
 192   3      //                      LCD_Show_FM_ICO();
 193   3                              LCD_Clear_BLUETooTH_ICO();
 194   3      //                      LCD_Show_BLUETooTH_ICO();
 195   3      //                      LCD_Clear_AUX_ICO();
 196   3                              LCD_Show_AUX_ICO();
 197   3                              LCD_Clear_USB_ICO();
 198   3      //                      LCD_Show_USB_ICO();
 199   3                              break;
 200   3                      case 'U':
 201   3                              LCD_Clear_FM_ICO();
 202   3      //                      LCD_Show_FM_ICO();
 203   3                              LCD_Clear_BLUETooTH_ICO();
 204   3      //                      LCD_Show_BLUETooTH_ICO();
 205   3                              LCD_Clear_AUX_ICO();
 206   3      //                      LCD_Show_AUX_ICO();
 207   3      //                      LCD_Clear_USB_ICO();
 208   3                              LCD_Show_USB_ICO();
 209   3                              break;
 210   3                      }
 211   2                      break;
 212   2              }
 213   1              if (index) {
 214   2                      index++;
 215   2      //      app_2d4_send(buf, index);
 216   2              }
 217   1      
 218   1      }
 219          
 220          void app_2d4_pro(void) {
 221   1              if (sendRcv_flag) {
 222   2      
 223   2                      switch (ucRF_GetStatus()) {
 224   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 225   3      
 226   3                              RF_ClearFIFO();
 227   3                              RF_ClearStatus();
 228   3      
 229   3                              sendRcv_flag = 0;
 230   3                              RF_RxMode();
 231   3      
 232   3      //                      key_bright_toggle();
 233   3      
 234   3                              break;
 235   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 236   3      
 237   3                              RF_ClearFIFO();
 238   3                              RF_ClearStatus();
 239   3                              break;
C51 COMPILER V9.56.0.0   APP_2D4                                                           08/30/2017 23:22:32 PAGE 5   

 240   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 241   3      
 242   3                              RF_ClearFIFO();
 243   3                              RF_ClearStatus();
 244   3                              break;
 245   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 246   3      
 247   3                              RF_TxData(sendBuf, sizeof(sendBuf));
 248   3      
 249   3                              break;
 250   3                      }
 251   2      
 252   2              } else {
 253   2                      if (ucRF_DumpRxData(rcvBuf, sizeof(rcvBuf))) {
 254   3      
 255   3      //                      key_bright_toggle();
 256   3      
 257   3                              app_2d4_Rcv(rcvBuf);
 258   3                      }
 259   2      
 260   2              }
 261   1      
 262   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    949    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
