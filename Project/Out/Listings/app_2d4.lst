C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_2D4
OBJECT MODULE PLACED IN .\Out\Objects\app_2d4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_2d4.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_2d4.lst) OBJEC
                    -T(.\Out\Objects\app_2d4.obj)

line level    source

   1          /*
   2           * app_2d4.c
   3           *
   4           *  Created on: 2017Äê8ÔÂ16ÈÕ
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          
  10          static idata uint8_t sendRcv_flag = 0; //0 rcv£¬ 1 send
  11          static idata uint8_t rcvBuf[PAYLOAD_WIDTH] = {0};
  12          static idata uint8_t sendBuf[PAYLOAD_WIDTH] = {0};
  13          
  14          void app_2d4_init(void) {
  15   1      
  16   1              sendRcv_flag = 0;
  17   1              memset(rcvBuf, 0, PAYLOAD_WIDTH);
  18   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
  19   1      
  20   1              RF_Init();
  21   1              RF_RxMode();
  22   1      
  23   1      //      RF_Carrier(1);
  24   1      }
  25          
  26          void app_2d4_send(uint8_t *d, uint8_t len) {
  27   1      
  28   1              if (len > PAYLOAD_WIDTH) {
  29   2                      return;
  30   2              }
  31   1      
  32   1              RF_TxMode();
  33   1              sendRcv_flag = 1;
  34   1      
  35   1              if (sendBuf != d) {
  36   2                      memcpy(sendBuf, d, len);
  37   2              }
  38   1      
  39   1      }
  40          static void speaker_status_resp(void) {
  41   1              if (g_tWork.status.bits.speaker) {
  42   2                      LCD_ShowString(" BAZOOKA");
  43   2              } else {
  44   2                      LCD_ShowString(" PWR OFF");
  45   2              }
  46   1      
  47   1      }
  48          static void relay_status_resp(void) {
  49   1              if (g_tWork.status.bits.relay) {
  50   2                      LCD_ShowString("RELAY ON");
  51   2              } else {
  52   2                      LCD_ShowString("RELAYOFF");
  53   2              }
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 2   

  54   1      
  55   1      }
  56          static void vol_resp(void) {
  57   1              char str[16] = { 0 };
  58   1      
  59   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  60   1              LCD_ShowString(str);
  61   1      }
  62          static void mode_resp(void) {
  63   1              char str[16] = { 0 };
  64   1      
  65   1              switch (g_tWork.mode) {
  66   2              case 'B':
  67   2                      g_tWork.mode = 'F';
  68   2                      break;
  69   2              case 'F':
  70   2                      g_tWork.mode = 'A';
  71   2                      break;
  72   2              case 'A':
  73   2                      g_tWork.mode = 'U';
  74   2                      break;
  75   2              case 'U':
  76   2                      g_tWork.mode = 'B';
  77   2                      break;
  78   2              }
  79   1      
  80   1              sprintf(str, " VOL %u", (uint16_t) g_tWork.vol);
  81   1              LCD_ShowString(str);
  82   1      }
  83          static void clear_lcd_resp(void) {
  84   1              LCD_ShowString("        ");
  85   1      
  86   1              LCD_Clear_upColon_ICO();
  87   1              LCD_Clear_downColon_ICO();
  88   1      }
  89          static void BT_pause_show_lcd_resp(void) {
  90   1              LCD_ShowString("   PAUSE");
  91   1      }
  92          
  93          static void BT_play_show_lcd_resp(void) {
  94   1              LCD_ShowString("    PLAY");
  95   1      }
  96          static void FM_scanning_show_lcd_resp(void) {
  97   1              LCD_ShowString("SCANNING");
  98   1              LCD_Clear_upColon_ICO();
  99   1              LCD_Clear_downColon_ICO();
 100   1              LCD_Clear_MHZ_ICO();
 101   1      }
 102          
 103          static void FM_ok_show_lcd_resp(void) {
 104   1              LCD_ShowString("FM 1027 ");
 105   1              LCD_Clear_upColon_ICO();
 106   1              LCD_Show_downColon_ICO();
 107   1              LCD_Show_MHZ_ICO();
 108   1      
 109   1      }
 110          static void AUX_mute_show_lcd_resp(void) {
 111   1              LCD_ShowString("   MUTE ");
 112   1      }
 113          
 114          static void AUX_play_show_lcd_resp(void) {
 115   1              LCD_ShowString("    PLAY");
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 3   

 116   1      
 117   1      }
 118          static void USB_pause_show_lcd_resp(void) {
 119   1              LCD_ShowString("   PAUSE");
 120   1              LCD_Clear_upColon_ICO();
 121   1              LCD_Clear_downColon_ICO();
 122   1      }
 123          
 124          static void USB_time_show_lcd_resp(void) {
 125   1              LCD_ShowString("     349");
 126   1              LCD_Show_upColon_ICO();
 127   1              LCD_Show_downColon_ICO();
 128   1      }
 129          static void app_2d4_Rcv(uint8_t *buf) {
 130   1              uint8_t i = 0;
 131   1              uint8_t index = 0;
 132   1              uint8_t check = 0;
 133   1      
 134   1              if (buf[0] != LAMP2LCD_HEADER) {
 135   2                      return;
 136   2              }       key_bright_toggle();
 137   1              if (buf[1] > PAYLOAD_WIDTH) {
 138   2                      return;
 139   2              }
 140   1              for (i = 0; i < (buf[1] + 1); i++) {
 141   2                      check += buf[i + 1];
 142   2              }
 143   1              if (check != buf[buf[1] + 2]) {
 144   2                      return;
 145   2              }
 146   1      
 147   1      
 148   1              memset(sendBuf, 0, PAYLOAD_WIDTH);
 149   1              index = 0;
 150   1              switch (buf[2]) {
 151   2              case POWER_SHORT_CMD:
 152   2      
 153   2                      break;
 154   2              case POWER_LONG_CMD:
 155   2      
 156   2                      if (buf[3]) {
 157   3                              g_tWork.status.bits.speaker = 1;
 158   3                              Repeat_SetStart(speaker_status_resp);
 159   3                              Repeat_SetStop(0);
 160   3      
 161   3                              Repeat_Start(20, 1, 1);
 162   3                      } else {
 163   3                              g_tWork.status.bits.speaker = 0;
 164   3                              Repeat_SetStart(speaker_status_resp);
 165   3                              Repeat_SetStop(0);
 166   3      
 167   3                              Repeat_Start(20, 1, 0);
 168   3                      }
 169   2      
 170   2                      break;
 171   2              case ACC_CMD:
 172   2      
 173   2                      if (buf[3] == 1) {
 174   3                              g_tWork.status.bits.relay = 1;
 175   3                      } else {
 176   3                              g_tWork.status.bits.relay = 0;
 177   3                      }
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 4   

 178   2      
 179   2                      Repeat_SetStart(relay_status_resp);
 180   2                      Repeat_SetStop(0);
 181   2      
 182   2                      Repeat_Start(20, 1, 1);
 183   2      
 184   2                      break;
 185   2              case UP_CMD:
 186   2      
 187   2                      break;
 188   2              case DOWN_CMD:
 189   2      
 190   2                      break;
 191   2              case DOME_CMD:
 192   2                      break;
 193   2              case VOL_ADD_CMD:
 194   2                      g_tWork.vol = buf[3];
 195   2      
 196   2                      Repeat_SetStart(vol_resp);
 197   2                      Repeat_SetStop(0);
 198   2      
 199   2                      Repeat_Start(20, 1, 1);
 200   2                      break;
 201   2              case VOL_MINUS_CMD:
 202   2                      g_tWork.vol = buf[3];
 203   2      
 204   2                      Repeat_SetStart(vol_resp);
 205   2                      Repeat_SetStop(0);
 206   2      
 207   2                      Repeat_Start(20, 1, 1);
 208   2                      break;
 209   2              case PLAY_CMD:
 210   2      
 211   2                      g_tWork.mode = (char) buf[3];
 212   2      
 213   2                      switch (g_tWork.mode) {
 214   3                      case 'B':
 215   3                              g_tWork.status.bits.BT = buf[4];
 216   3                              if (g_tWork.status.bits.BT) {
 217   4                                      Repeat_SetStart(BT_play_show_lcd_resp);
 218   4                                      Repeat_SetStop(0);
 219   4                                      Repeat_Start(20, 1, 1);
 220   4                              } else {
 221   4                                      Repeat_SetStart(BT_pause_show_lcd_resp);
 222   4                                      Repeat_SetStop(clear_lcd_resp);
 223   4                                      Repeat_Start(10, 10, 0);
 224   4                              }
 225   3                              break;
 226   3                      case 'F':
 227   3                              g_tWork.status.bits.FM = buf[4];
 228   3                              if (g_tWork.status.bits.FM) {
 229   4                                      Repeat_SetStart(FM_scanning_show_lcd_resp);
 230   4                                      Repeat_SetStop(0);
 231   4                                      Repeat_Start(20, 1, 0);
 232   4                              } else {
 233   4                                      Repeat_SetStart(FM_ok_show_lcd_resp);
 234   4                                      Repeat_SetStop(0);
 235   4                                      Repeat_Start(10, 1, 1);
 236   4                              }
 237   3                              break;
 238   3                      case 'A':
 239   3                              g_tWork.status.bits.AUX = buf[4];
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 5   

 240   3                              if (g_tWork.status.bits.AUX) {
 241   4                                      Repeat_SetStart(AUX_play_show_lcd_resp);
 242   4                                      Repeat_SetStop(clear_lcd_resp);
 243   4                                      Repeat_Start(10, 10, 0);
 244   4                              } else {
 245   4                                      Repeat_SetStart(AUX_mute_show_lcd_resp);
 246   4                                      Repeat_SetStop(clear_lcd_resp);
 247   4                                      Repeat_Start(10, 10, 0);
 248   4                              }
 249   3      
 250   3                              break;
 251   3                      case 'U':
 252   3                              g_tWork.status.bits.USB = buf[4];
 253   3                              if (g_tWork.status.bits.USB) {
 254   4                                      Repeat_SetStart(USB_time_show_lcd_resp);
 255   4                                      Repeat_SetStop(0);
 256   4                                      Repeat_Start(10, 1, 1);
 257   4                              } else {
 258   4                                      Repeat_SetStart(USB_pause_show_lcd_resp);
 259   4                                      Repeat_SetStop(clear_lcd_resp);
 260   4                                      Repeat_Start(10, 10, 0);
 261   4                              }
 262   3                              break;
 263   3                      }
 264   2      
 265   2                      break;
 266   2              case MODE_CMD:
 267   2                      g_tWork.mode = (char) buf[3];
 268   2      
 269   2                      switch (g_tWork.mode) {
 270   3                      case 'B':
 271   3                              LCD_Clear_FM_ICO();
 272   3      //                      LCD_Show_FM_ICO();
 273   3      //                      LCD_Clear_BLUETooTH_ICO();
 274   3                              LCD_Show_BLUETooTH_ICO();
 275   3                              LCD_Clear_AUX_ICO();
 276   3      //                      LCD_Show_AUX_ICO();
 277   3                              LCD_Clear_USB_ICO();
 278   3      //                      LCD_Show_USB_ICO();
 279   3                              break;
 280   3                      case 'F':
 281   3      //                      LCD_Clear_FM_ICO();
 282   3                              LCD_Show_FM_ICO();
 283   3                              LCD_Clear_BLUETooTH_ICO();
 284   3      //                      LCD_Show_BLUETooTH_ICO();
 285   3                              LCD_Clear_AUX_ICO();
 286   3      //                      LCD_Show_AUX_ICO();
 287   3                              LCD_Clear_USB_ICO();
 288   3      //                      LCD_Show_USB_ICO();
 289   3                              break;
 290   3                      case 'A':
 291   3                              LCD_Clear_FM_ICO();
 292   3      //                      LCD_Show_FM_ICO();
 293   3                              LCD_Clear_BLUETooTH_ICO();
 294   3      //                      LCD_Show_BLUETooTH_ICO();
 295   3      //                      LCD_Clear_AUX_ICO();
 296   3                              LCD_Show_AUX_ICO();
 297   3                              LCD_Clear_USB_ICO();
 298   3      //                      LCD_Show_USB_ICO();
 299   3                              break;
 300   3                      case 'U':
 301   3                              LCD_Clear_FM_ICO();
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 6   

 302   3      //                      LCD_Show_FM_ICO();
 303   3                              LCD_Clear_BLUETooTH_ICO();
 304   3      //                      LCD_Show_BLUETooTH_ICO();
 305   3                              LCD_Clear_AUX_ICO();
 306   3      //                      LCD_Show_AUX_ICO();
 307   3      //                      LCD_Clear_USB_ICO();
 308   3                              LCD_Show_USB_ICO();
 309   3                              break;
 310   3                      }
 311   2                      break;
 312   2              }
 313   1              if (index) {
 314   2                      index++;
 315   2      //      app_2d4_send(buf, index);
 316   2              }
 317   1      
 318   1      }
 319          
 320          void app_2d4_pro(void) {
 321   1              if (sendRcv_flag) {
 322   2      
 323   2                      switch (ucRF_GetStatus()) {
 324   3                      case TX_DS_FLAG:                // ÆÕÍ¨ÐÍ·¢ËÍÍê³É »ò ÔöÇ¿ÐÍ·¢ËÍ³É¹¦
 325   3      
 326   3                              RF_ClearFIFO();
 327   3                              RF_ClearStatus();
 328   3      
 329   3                              sendRcv_flag = 0;
 330   3                              RF_RxMode();
 331   3      
 332   3      //                      key_bright_toggle();
 333   3      
 334   3                              break;
 335   3                      case RX_DR_FLAG:                //·¢ËÍ³É¹¦ÇÒÊÕµ½payload
 336   3      
 337   3                              RF_ClearFIFO();
 338   3                              RF_ClearStatus();
 339   3                              break;
 340   3                      case MAX_RT_FLAG:               // ÔöÇ¿ÐÍ·¢ËÍ³¬Ê±Ê§°Ü
 341   3      
 342   3                              RF_ClearFIFO();
 343   3                              RF_ClearStatus();
 344   3                              break;
 345   3                      default:                // rf ´¦ÓÚ¿ÕÏÐ×´Ì¬²Å·¢ËÍÊý¾Ý
 346   3      
 347   3                              RF_TxData(sendBuf, PAYLOAD_WIDTH);
 348   3      
 349   3                              break;
 350   3                      }
 351   2      
 352   2              } else {
 353   2                      if (ucRF_DumpRxData(rcvBuf, PAYLOAD_WIDTH)) {
 354   3      
 355   3      
 356   3      
 357   3                              LCD_Clear_MHZ_ICO();
 358   3                              LCD_Clear_upColon_ICO();
 359   3                              LCD_Clear_downColon_ICO();
 360   3      
 361   3                              app_2d4_Rcv(rcvBuf);
 362   3                      }
 363   2      
C51 COMPILER V9.56.0.0   APP_2D4                                                           09/03/2017 16:50:59 PAGE 7   

 364   2              }
 365   1      
 366   1      }
 367          
 368          void app_2d4_1S_pro(void) {
 369   1      
 370   1              switch (g_tWork.mode) {
 371   2              case 'B':
 372   2      
 373   2                      app_lcd_default_string_set(" PAIRING", 8);
 374   2                      LCD_Clear_MHZ_ICO();
 375   2      
 376   2                      LCD_Clear_upColon_ICO();
 377   2                      LCD_Clear_downColon_ICO();
 378   2      
 379   2                      break;
 380   2              case 'F':
 381   2                      app_lcd_default_string_set("FM  821 ", 8);
 382   2                      LCD_Clear_upColon_ICO();
 383   2                      LCD_Show_downColon_ICO();
 384   2      
 385   2                      LCD_Show_MHZ_ICO();
 386   2                      break;
 387   2              case 'A':
 388   2                      app_lcd_default_string_set("    PLAY", 8);
 389   2                      LCD_Clear_MHZ_ICO();
 390   2                      LCD_Clear_upColon_ICO();
 391   2                      LCD_Clear_downColon_ICO();
 392   2                      break;
 393   2              case 'U':
 394   2                      app_lcd_default_string_set("     349", 8);
 395   2                      LCD_Show_upColon_ICO();
 396   2                      LCD_Show_downColon_ICO();
 397   2      
 398   2                      LCD_Clear_MHZ_ICO();
 399   2                      break;
 400   2              }
 401   1      
 402   1      }
 403          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1508    ----
   CONSTANT SIZE    =    157    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     33    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
